/**
\page lua_api_shader Shaders

\tableofcontents

This module provides a datatype \c shader that represents
an OpenGL or OpenGL ES shader program.

\section lua_api_game_overview Overview

Shaders allow you to modify the video rendering,
for example to apply a smoothing filter or to
make some advanced visual effects.

Shaders are programs executed by the GPU during a rendering pass.
They are written in a shading language
(GLSL or GLSL ES in Solarus).
Solarus compiles them at runtime when you create them
with \ref lua_api_shader_create "sol.shader.create()".
If you activate them with
\ref lua_api_video_set_shader "sol.video.set_shader()",
they are then executed on the GPU at each rendering frame.

A shader program, represented by the \c shader Solarus datatype,
is composed of a vertex shader and of a fragment shader
(also called pixel shader).

At every rendering frame,
the vertex shader is called for each of the four corners of the input texture.
If no vertex shader is defined in your shader program,
then a default one is used.
The fragment shader is then called for each pixel of the window.
The fragment shader is mandatory in a Solarus shader program.

The rest of this documentation page 
explains how to use shaders with the Solarus Lua API.
We assume that you have some basic
knowledge of shaders and GLSL or GLSL ES.
See the documentation of OpenGL and OpenGL ES for more information
about shaders and shading languages.

\subsection lua_api_shader_overview_current Current shader

During the execution, a shader may be applied to the rendering.
Use \ref lua_api_video_get_shader "sol.video.get_shader()"
and \ref lua_api_video_set_shader "sol.video.set_shader()"
to control this.

The id of the shader applied if any can be saved and loaded
with the global settings,
(as well as other preferences like the language and the volume),
independently of any savegame.
See \ref lua_api_main_load_settings "sol.main.load_settings()".

\subsection lua_api_shader_overview_built_in_variables Built-in attributes and uniforms

Additionally to the OpenGL or OpenGL ES built-in variables,
Solarus automatically passes some additional useful variables to your shaders.
Solarus built-in variables are always prefixed with \c "sol_".

Note that using the Lua API, you can also pass your own variables.

In a vertex shader, the following two attributes are automatically passed
as input:
- <tt>attribute vec4 sol_vertex_coord</tt>: Coordinates of the current vertex
  in the 3D space
  (same as \c gl_Vertex in old GLSL versions).
- <tt>attribute vec4 sol_tex_coord</tt>: Texture coordinates of the
  current vertex
  (same as \c gl_MultiTexCoord0 in old GLSL versions).

The following uniforms
are automatically passed as input if they are declared
in a vertex shader or in a fragment shader:
- <tt>uniform mat4 sol_mvp_matrix</tt>: The model-view projection matrix
  (same as \c gl_ModelViewProjectionMatrix in old GLSL versions).
- <tt>uniform sampler2D sol_texture</tt>: The input texture to render.
- <tt>uniform vec2 sol_input_size</tt>: Size of actual video
  data in pixels in the input texture \c sol_texture.
  Equal to
  \ref lua_api_video_get_quest_size "sol.video.get_quest_size()".
- <tt>uniform vec2 sol_texture_size</tt>: Real size of \c sol_texture
  in pixels
  (a power of two greater than or equal to \c sol_input_size).
- <tt>uniform vec2 sol_output_size</tt>: Size of the output rendering
  area.
  Equal to
  \ref lua_api_video_get_window_size "sol.video.get_window_size()".
- <tt>uniform int sol_time</tt>: Simulated time elapsed since
  Solarus was started.
  Equal to
  \ref lua_api_main_get_elapsed_time "sol.main.get_elapsed_time()".

\subsection lua_api_shader_overview_examples Shader examples

Here is a shader program that does nothing special:
it just scales the input texture to fit the window,
just like when no shader is set.

\verbatim
// Vertex shader:

varying vec2 tex_coord;
void main() {
  gl_Position = sol_mvp_matrix * sol_vertex;
  tex_coord = sol_tex_coord.xy;
}

// Fragment shader:

uniform sampler2D sol_texture;
varying vec2 tex_coord;
void main() {
  gl_FragColor = texture2D(sol_texture, tex_coord);
}
\endverbatim

Now, another example of a shader program
that removes the red component of all pixels:

\verbatim
// Vertex shader:

varying vec2 tex_coord;
void main() {
  gl_Position = sol_mvp_matrix * sol_vertex;
  tex_coord = sol_tex_coord.xy;
}

// Fragment shader:

uniform sampler2D sol_texture;
varying vec2 tex_coord;
void main() {
  vec3 color  = texture2D(sol_texture, tex_coord);
  color.r = 0.0;
  gl_FragColor = color;
}
\endverbatim

\subsection lua_api_shader_overview_portability Portability

The exact supported shader language depends
on the OpenGL or OpenGL ES version Solarus is compiled with on every platform.
Typically, on desktop platforms, Solarus is compiled with OpenGL support
and the shader language used is some version of GLSL.
On mobile platforms, OpenGL ES and GLSL ES are normally used instead.

For maximum portability, there are two possible approaches:
- Shaders can be written carefully to make sure that they work
  with both GLSL and GLSL ES.
  This requires using a lot of portability macros because there are some
  incompatibilities.
  If you use the \c \#version macro, be careful because
  GLSL and GLSL ES have their own history of version numbers.
- For more clarity, another solution is to load different shaders
  for GLSL and GLSL ES (but there will be some duplicated code).
  To do this. you can try to load a first shader, and in case of failure,
  catch the Lua error and try to load an alternative one.
  Or you can try to guess the correct one using
  \ref lua_api_shader_get_opengl_version "sol.shader.get_opengl_version()"
  and/or
  \ref lua_api_shader_get_shading_language_version
  "sol.shader.get_shader_language_version()".

In any case, a good practice is to rely on the
\ref lua_api_shader_overview_built_in_variables "Solarus built-in variables"
(plus your own ones)
rather than the OpenGL ones,
since a lot of old OpenGL built-in variables
(like \c gl_Vertex or \c gl_ModelViewProjectionMatrix)
are now obsolete
or simply don't exist
in recent OpenGL versions and in OpenGL ES.

\section lua_api_shader_functions Functions of sol.shader

\subsection lua_api_shader_create sol.shader.create(shader_id)

Loads and returns a shader program.

If the loading or the compilation of the shader program fails,
a Lua error is raised.
- \c shader_id (string): Id of the shader program to load
  (filename without extension, relative to the \c shaders directory).
- Return value (shader): The shader program created.

\subsection lua_api_shader_get_opengl_version sol.shader.get_opengl_version()

Returns the OpenGL or OpenGL ES version Solarus is being run with.
- Return value (string): A string describing the OpenGL or OpenGL ES version.

\subsection lua_api_shader_get_shading_language_version sol.shader.get_shading_language_version()

Returns the GLSL or GLSL ES format supported
by the OpenGL or OpenGL ES version currently used.
- Return value (string): A string describing the shading language version.

\section lua_api_shader_methods Methods of the type shader

\subsection lua_api_shader_get_id shader:get_id()

Returns the id of this shader program.
- Return value (string): Id of this shader program (filename without extension).

\subsection lua_api_shader_get_vertex_file shader:get_vertex_file()

Returns the name of the vertex shader file of this shader program.
- Return value (string): The vertex shader file name,
  relative to the \c "shaders" directory,
  or \c nil if no vertex shader file was set.

\subsection lua_api_shader_get_fragment_file shader:get_fragment_file()

Returns the name of the fragment shader file of this shader program.
- Return value (string): The fragment shader file name,
  relative to the \c "shaders" directory.

\subsection lua_api_shader_set_uniform shader:set_uniform(uniform_name, value, [value_2])

Sets a uniform value to this shader.

Uniforms are input values to shader programs that are constant for
all vertices and pixels during one rendering frame.
Solarus automatically sets some uniform variables for you
if you define them
(see the \ref lua_api_shader_overview_built_in_variables "built-in variables"
section above).

Use this function if you want to pass additional uniform values.

The type of the uniform in your shader source code will depend on the
Lua type you pass here:
- A \c boolean: should be declared as \c bool in the shader.
- A \c number: should be declared as \c float in the shader.
- Two <tt>number<tt>s: should be declared as \c vec2 in the shader.
- A \ref lua_api_surface "surface": should be declared as \c sampler2D
  in the shader.

If the shader has no uniform with the given name, then this method
has no effect.
- \c uniform_name (string): Name of the uniform in your shader program.
- value (boolean, number or surface): The value to set.
- value_2 (number, optional): The second value if any.

*/

