/**
\page lua_api_map Map

\tableofcontents

Maps are areas where the \ref lua_api_game "game" takes place.
They may be rooms, houses, entire dungeon floors, parts of the outside
world or any place.
The active map contains many objects called
\ref lua_api_entity "map entities" (or just "entities" to be short).
%Map entities include everything that has a position on the map:
the \ref lua_api_hero "hero",
the \ref lua_api_tile "tiles",
the \ref lua_api_enemy "enemies",
the \ref lua_api_pickable "pickable treasures", etc.
See the \ref lua_api_entity "entity API" for more details.

\section lua_api_map_overview Overview

\subsection lua_api_map_overview_position Coordinates and layer

A map has a rectangular size in pixels. The width and the height are always
multiples of 8 pixels, and most \ref lua_api_entity "map entities" usually
stay aligned on a grid of squares of 8x8 pixels (except when they are moving).

Thus, each \ref lua_api_entity "entity" has some coordinates <tt>X,Y</tt>
on the map. But its position is also defined by a third value: its layer.
The map has a number of distinct layers that are stacked.
Each layer has its own set of entities.
Layers are identified by a number.
There is always a layer \c 0, and maps can add additional
layers above or below \c 0.

Layers allow to implement maps with multi-level content, like a bridge
between two higher platforms. The \ref lua_api_hero "hero"
(as well as \ref lua_api_enemy "enemies" and any other
\ref lua_api_entity "map entity") is then able to
walk either above or under the bridge, depending on his layer.
Entities like \ref lua_api_stairs "stairs" and
\ref lua_api_jumper "jumpers" can change the layer of the hero
automatically, and you can also do that from your Lua scripts.

\subsection lua_api_map_overview_tileset Tileset

The graphic skin of a map is called a \ref quest_tileset_data_file "tileset".
The tileset defines the small patterns used to draw \ref lua_api_tile "tiles"
and also some other \ref lua_api_entity "entities" that may depend on the
skin.
For example, you can have a forest tileset, a castle tileset, etc.
Each map has only one tileset, but tilesets have no special size limitation.

\subsection lua_api_map_overview_files Map files

A map can contain many types of \ref lua_api_entity "entities".
%Map entities can be either declared in the
map data file or created dynamically.
Thus, a map with id \c XXXX is managed by two distinct files:
- In the data file
  \ref quest_map_data_file "maps/XXXX.dat"
  are declared all entities that
  initially compose your map (most importantly: the
  \ref lua_api_tile "tiles").
  You normally don't need to edit this file by hand:
  you can use the quest editor
  (but if you want to,
  \ref quest_map_data_file "here is the syntax").
- In the script file
  \c "maps/XXXX.lua"
  (which is optional),
  you define the dynamic behavior
  of your map, using the features of the map Lua type described on this page
  (and the rest of the Solarus API will also be very useful).

When the player enters a map, the engine first creates the \ref lua_api_entity
"entities" declared in the map data file
\ref quest_map_data_file "maps/XXXX.dat",
and then it runs your script
\c "maps/XXXX.lua".
The Lua map object is passed as parameter of your script
(remember that any Lua script is implicitly a function and can have parameters).
Use the Lua notation \c "..." to get this parameter and store
it into a regular variable.

Here is a basic example of script for a map that does nothing special
except playing a special music and showing an evil welcome dialog when the
hero enters it.
\verbatim
-- First, we put the parameter into a variable called "my_map".
-- (In Lua, the notation "..." refers to the parameter(s) of the script.)
local my_map = ...

-- Event called when the player enters the map, at initialization time.
function my_map:on_started()

  -- Play an evil music.
  sol.audio.play_music("evil")
end

-- Event called when the player enters the map, after the opening transition.
function my_map:on_opening_transition_finished()

  -- Show an evil welcome dialog.
  my_map:get_game():start_dialog("welcome_to_darkness")
end
\endverbatim

In practice, many maps have short scripts like this or even no script at all.
Sometimes, everything that you define in the data file
(with the help of the quest editor) is enough.
You need a script when there is something dynamic to program on your map:
opening a \ref lua_api_door "door" when a
\ref lua_api_switch "pressure plate" is pressed,
making a \ref lua_api_chest "treasure chest" appear when some
\ref lua_api_enemy "enemies" are killed,
showing a dialog with an \ref lua_api_npc "NPC" that depends on
whether the player has accomplished a particular action before, etc.

\subsection lua_api_map_overview_lifetime Lifetime of maps

At any moment, during the \ref lua_api_game "game",
only one map is active:
the one drawn on the game screen.
That map is also the one where the \ref lua_api_hero "hero"
is currently located.
Only the active map has its entities living in it.
Other maps are not loaded. If the player leaves the map and comes back later,
your Lua map object will be a new one the second time.
Your entities will be reloaded as specified in the
\ref quest_map_data_file "map data file" and your map script will be executed
again.

If you want some data or behavior to persist when the player comes back,
like the position of an \ref lua_api_npc "NPC" or whether a puzzle was solved,
you can store the information into the \ref lua_api_game_set_value "savegame".
Alternatively, if you don't want these data to be saved, but you want to
remember then during the current \ref lua_api_game "game" session,
you can store the information as a field of the
\ref lua_api_game "game" object. The game object persists until the player
stops playing and comes back to the title screen or restarts the game.

\remark Some entities save their state automatically if you want, like
whether a \ref lua_api_chest "treasure chest" is open, whether a
\ref lua_api_door "door" is open or whether an \ref lua_api_enemy "enemy"
is killed. Therefore, you have nothing to do for such entities: they keep
their state.

\subsection lua_api_map_overview_table Accessing maps like tables

Like other essential Solarus types (including \ref lua_api_game "game",
\ref lua_api_item "items" and
\ref lua_api_entity "map entities"),
a fundamental property of maps is that even if they
are userdata, they can also be used like Lua tables.

This property is actually what allows you to define callbacks on your map.
But you can store any data in your map object,
including new functions specific to your particular map.
Here is an example that uses this feature:
\verbatim
-- Example of a map with 3 switches to activate in the correct order.
-- We assume that 3 switches exist with names "puzzle_switch_1", "puzzle_switch_2" and "puzzle_switch_3".
local map = ...

function map:on_started()
  map.next_switch_index = 1
  -- Equivalent to: map["next_switch_index"] = 1
end

-- Called when the player walks on the switch named "puzzle_switch_1".
function puzzle_switch_1:on_activated()
  -- Check that puzzle_switch_1 is the correct switch to activate.
  map:check_switch(self)
end

function puzzle_switch_2:on_activated()
  map:check_switch(self)
end

function puzzle_switch_3:on_activated()
  map:check_switch(self)
end

function map:check_switch(switch)
  if switch:get_name() == "puzzle_switch_" .. map.next_switch_index then
    -- Okay so far.
    map.next_switch_index = map.next_switch_index + 1
    if map.next_switch_index > 3 then
      -- Finished!
      sol.audio.play_sound("secret")
      map:get_game():start_dialog("congratulations")
    end
  else
    -- Wrong switch: reset the puzzle.
    sol.audio.play_sound("wrong")
    puzzle_switch_1:set_activated(false)
    puzzle_switch_2:set_activated(false)
    puzzle_switch_3:set_activated(false)
    map.next_switch_index = 1
  end
end
\endverbatim
In this example, you see that we add three values to the map object, like it
was a table:
\c next_switch_index (a number),
\c on_started (a function) and
\c check_switch (a function).
Actually, we also use this feature on the three switches:
we add a value \c on_activated on them.

\remark You may wonder how we can access \c puzzle_switch_1,
\c puzzle_switch_2
and \c puzzle_switch_3 without declaring them.
There is a mechanism that makes all
named \ref lua_api_entity "map entities" directly accessible in the environment
of the map script.
See \ref lua_api_map_get_entity "map:get_entity()" for more details.

But this example has some issues.
The three \ref lua_api_switch "switches" are managed by duplicated code.
This is error-prone because one day, we will probably want to make a similar
puzzle with 50 entities instead of just 3.
To make your map easier to maintain, the following and equivalent version is
much more preferred:
\verbatim
local map = ...

function map:on_started()
  map.next_switch_index = 1
  map.nb_switches = map:get_entities_count("puzzle_switch_")
end

local function puzzle_switch_activated(switch)
  map:check_switch(switch)
end

-- Define the same on_activated() method for all entities whose name
-- starts with "puzzle_switch_".
for switch in map:get_entities("puzzle_switch_") do
  switch.on_activated = puzzle_switch_activated
end

function map:check_switch(switch)
  if switch:get_name() == "puzzle_switch_" .. map.next_switch_index then
    -- Okay so far.
    map.next_switch_index = map.next_switch_index + 1
    if map.next_switch_index > map.nb_switches then
      -- Finished!
      sol.audio.play_sound("secret")
      map:start_dialog("congratulations")
    end
  else
    -- Wrong switch: reset the puzzle.
    sol.audio.play_sound("wrong")
    for s in map:get_entities("puzzle_switch_") do
      s:set_activated(false)
    end
    map.next_switch_index = 1
  end
end
\endverbatim

This improved version is more evolutive: it does not even hardcode the number
of \ref lua_api_switch "switches" in the puzzle.
Thus, if you add a switch called \c "puzzle_switch_4" from the editor one day,
the script will be directly take it into account in the puzzle.

\section lua_api_map_methods Methods of the type map

\subsection lua_api_map_get_id map:get_id()

Returns the id of this map.
- Return value (string): Id of the map.

\remark This id appears in the name of \ref
  lua_api_map_overview_files "map files".

\subsection lua_api_map_get_game map:get_game()

Returns the current game.
- Return value (\ref lua_api_game "game"): The game that is currently running
  the map.

\subsection lua_api_map_get_world map:get_world()

Returns the world name that was set on this map.

The world name is an optional property defined in the
\ref lua_api_map_overview_files "map data file".
Worlds allow to group maps together.
The world can be any arbitrary name. Maps that have the same world name
are considered to be part of the same environment.
For example, your map can be in a world named \c "outside_world",
\c "dungeon_1" or \c "some_scary_cave".
A map that has no world is always considered to be alone in its own
environment.

The world property is used to decide when to set the starting location of
the player (the place where he starts when loading his
\ref lua_api_game "savegame").
By default, the starting location is automatically set by the engine
when the world changes (not when the map changes).
This can be changed by defining the "Save starting location" property
of destinations, from the quest editor or from a script (with
\ref lua_api_destination_set_starting_location_mode
"destination:set_starting_location_mode()").

Some other features may also rely on the world property, like the state of
\ref lua_api_crystal_block "crystal blocks". Their state persists
between all maps of the current world and is reset when entering a
map whose world is different.
- Return value (string): Name of the world of the current map.
  \c nil means no world.

\subsection lua_api_map_set_world map:set_world(world)

Changes the world of this map.

The world property remains until the map is destroyed:
If you reload the same map again later,
the world is reset to the one defined in the
\ref lua_api_map_overview_files "map data file".
- \c world (string): The new world name to set,
  or \c nil to set no world.

\subsection lua_api_map_get_floor map:get_floor()

Returns the floor of the current map if any.

The floor is an optional property defined in the
\ref lua_api_map_overview_files "map data file".

The engine does not do anything particular with this floor property.
But you can use it in scripts,
for example to show the current floor on the HUD
when it changes or to make a minimap \ref lua_api_menu "menu".
- Return value (number): The current floor. \c 0 is the first floor, \c 1
  is the second floor, \c -1 is the first basement floor, etc.
  \c nil means that this map is not part of a floor system.

\subsection lua_api_map_set_floor map:set_floor(floor)

Changes the floor of this map.

The floor property remains until the map is destroyed:
If you reload the same map again later,
the floor is reset to the one defined in the
\ref lua_api_map_overview_files "map data file".
- \c floor (number): The new floor number to set,
  or \c nil to set no floor.

\subsection lua_api_map_get_min_layer map:get_min_layer()

Returns the index of the lowest layer of this map.
- Return value (number): The lowest layer (0 or less).

\subsection lua_api_map_get_max_layer map:get_max_layer()

Returns the index of the highest layer of this map.
- Return value (number): The highest layer (0 or more).

\subsection lua_api_map_get_size map:get_size()

Returns the size of this map in pixels.
- Return value 1 (number): The width in pixels (always a multiple of 8).
- Return value 2 (number): The height in pixels (always a multiple of 8).

\subsection lua_api_map_get_location map:get_location()

Returns the x,y location of this map in its
\ref lua_api_map_get_world "world".

The engine uses this information to implement scrolling between two adjacent
maps.

For example, you can also use this property in scripts if you want to show
the position
of the hero on the minimap \ref lua_api_menu "menu" of your outside
\ref lua_api_map_get_world "world".
Indeed, your outside world is probably not a single map, but it is usually
composed of several adjacent maps.
- Return value 1 (number): X position of the top-left corner of this map
  relative to its world.
- Return value 2 (number): Y position of the top-left corner of this map
  relative to its world.

\subsection lua_api_map_get_tileset map:get_tileset()

Returns the name of the \ref lua_api_map_overview_tileset "tileset"
of the current map.
- Return value (string): Id of the current tileset.

\subsection lua_api_map_set_tileset map:set_tileset(tileset_id)

Changes the \ref lua_api_map_overview_tileset "tileset"
of the current map.

It is your responsability to make sure that
the new tileset is be compatible with the previous one:
every tile of the previous tileset must exist in the new one
and have the exact same properties, and only the images can differ.
Internally, this function actually keeps the data of the previous tileset
and only loads the image of the new tileset.
- \c tileset_id (string): Id of the new tileset to set.

\remark If the new tileset is not compatible with the previous one,
  tiles will be displayed with wrong graphics.

\subsection lua_api_map_get_music map:get_music()

Returns the name of the music associated to this map.

This is the music to play when the map starts, as specified in the map file.
It may be different from the music currently being played.
To get the music currently being played, see
\ref lua_api_audio_get_music "sol.audio.get_music()".
- Return value (string): Name of the music of this map, relative to
  the \c musics directory and without extension.
  It can also be the special value \c "same" if the map specifies to keep the
  music unchanged,
  or \c nil if the map specifies to play no music.

\subsection lua_api_map_get_camera map:get_camera()

Returns the camera entity of the map.
- Return value (\ref lua_api_camera "camera"): The camera.

\subsection lua_api_map_get_ground map:get_ground(x, y, layer)

Returns the kind of ground (terrain) of a point.

The ground is defined by
\ref lua_api_tile "tiles"
(and other entities that may change it like
\ref lua_api_dynamic_tile "dynamic tiles")
that overlap this point.
- \c x (number): X coordinate of a point of the map.
- \c y (number): Y coordinate of a point of the map.
- \c layer (number): The layer, between
  \ref lua_api_map_get_min_layer "map:get_min_layer()" and
  \ref lua_api_map_get_max_layer "map:get_max_layer()".
- Return value (string): The kind of ground. The possible values are the
  same as the \c ground property of the
  \ref quest_tileset_data_file "tileset file":
  \c "empty",
  \c "traversable",
  \c "wall",
  \c "low_wall",
  \c "wall_top_right",
  \c "wall_top_left",
  \c "wall_bottom_left",
  \c "wall_bottom_right",
  \c "wall_top_right_water",
  \c "wall_top_left_water",
  \c "wall_bottom_left_water",
  \c "wall_bottom_right_water",
  \c "deep_water",
  \c "shallow_water",
  \c "grass",
  \c "hole",
  \c "ice",
  \c "ladder",
  \c "prickles" or
  \c "lava".

\subsection lua_api_map_draw_visual map:draw_visual(drawable, x, y)

Draws a \ref lua_api_drawable "drawable object"
(\ref lua_api_surface "surface",
\ref lua_api_text_surface "text surface"
or \ref lua_api_sprite "sprite")
on the
\ref lua_api_map_get_camera "camera"
at the given map coordinates.

This function can be used as an alternative to
\ref lua_api_drawable_draw "drawable:draw()" in order to draw the object
relative to the map (instead of relative to the screen).

If the object to draw is a
\ref lua_api_sprite "sprite",
its origin point will be displayed at the given
location, relative to the the upper left corner of the map.

This function should only be called during the drawing phase of the map,
for example from
\ref lua_api_map_on_draw "map:on_draw()"
or from
\ref lua_api_custom_entity_on_pre_draw "custom_entity:on_pre_draw()".
- \c drawable (\ref lua_api_drawable "drawable"): The visual object to draw
  on the map.
- \c x (number): X coordinate of where to draw the object, in map coordinates.
- \c y (number): Y coordinate of where to draw the object, in map coordinates.

\subsection lua_api_map_draw_sprite map:draw_sprite(sprite, x, y)

Draws a \ref lua_api_sprite "sprite" on the screen
at the given map coordinates.

\warning This method is deprecated since Solarus 1.5.

Use
\ref lua_api_map_draw_visual "map:draw_visual()"
instead.

\subsection lua_api_map_get_crystal_state map:get_crystal_state()

Returns the configuration of \ref lua_api_crystal_block
"crystal blocks".
- Return value (boolean): \c false initially (orange blocks lowered),
  \c true otherwise (blue blocks lowered).

\subsection lua_api_map_set_crystal_state map:set_crystal_state(state)

Sets the configuration of \ref lua_api_crystal_block
"crystal blocks".

This state persists accross maps of the same \ref lua_api_map_get_world
"world". It is reset when the world changes and when the
\ref lua_api_game "savegame" is reloaded.
- \c state (boolean): \c false to set the initial configuration
  (orange blocks lowered), \c true to the modified one (blue blocks lowered).

\subsection lua_api_map_change_crystal_state map:change_crystal_state()

Inverts the configuration of \ref lua_api_crystal_block
"crystal blocks".

\remark Equivalent to
<tt>map:set_crystal_state(not map:get_crystal_state())</tt>.

\subsection lua_api_map_open_doors map:open_doors(prefix)

Opens the \ref lua_api_door "doors"
whose name starts with the specified prefix,
enables or disables relative
\ref lua_api_dynamic_tile "dynamic tiles" accordingly
and plays the \c "door_open" \ref lua_api_audio_play_sound
"sound".

Opening a door may be more complex than just modifying
a single \ref lua_api_door "door entity".
Indeed, there is often a corresponding door is the adjacent
room that you also want to open (that corresponding
door is another \ref lua_api_entity "entity").
Name both doors with the same prefix, and you can use this function to
open both of them.

Furthermore, you sometimes want \ref
lua_api_dynamic_tile "dynamic tiles"
to be shown or hidden depending on the state of a door.
When a door is open,
all dynamic tiles whose prefix is the door's name
followed by <tt>_open</tt> or <tt>_closed</tt> are automatically
enabled or disabled, respectively.
- \c prefix (string): Prefix of the name of doors to open.

\remark The doors will be really closed once the opening animation of
  their sprite is finished. However, they immediately become obstalces.

\subsection lua_api_map_close_doors map:close_doors(prefix)

Closes the \ref lua_api_door "doors"
whose name starts with the specified prefix,
enables or disables relative
\ref lua_api_dynamic_tile "dynamic tiles" accordingly
and plays the \c "door_closed" \ref lua_api_audio_play_sound
"sound".

Closing a door may be more complex than just modifying
a single \ref lua_api_door "door entity".
Indeed, there is often a corresponding door is the adjacent
room that you also want to open (that corresponding
door is another \ref lua_api_entity "entity").
Name both doors with the same prefix, and you can use this function to
close both of them.

Furthermore, you sometimes want \ref
lua_api_dynamic_tile "dynamic tiles"
to be shown or hidden depending on the state of a door.
When a door is closed,
all dynamic tiles whose prefix is the door's name
followed by <tt>_open</tt> or <tt>_closed</tt> are automatically
disabled or enabled, respectively.
- \c prefix (string): Prefix of the name of doors to close.

\subsection lua_api_map_set_doors_open map:set_doors_open(prefix, [open])

Like \ref lua_api_map_open_doors "map:open_doors()" or
\ref lua_api_map_close_doors "map:close_doors()",
but does not play any sound or any sprite animation.

This function is intended to be called when you don't want the player
to notice the change, typically when your map starts
(i.e. from the \ref lua_api_map_on_started "map:on_started()" event).
- \c prefix (string): Prefix of the name of doors to set.
- \c open (boolean, optional): \c true to open the doors, \c false
  to close them (no value means \c true).

\subsection lua_api_map_get_entity map:get_entity(name)

Returns the \ref lua_api_entity "map entity" with the specified name
if it exists on this map.
Entity names are unique (two entities cannot exist on the map
with the same name at the same time).
The name is optional: some entities may have no name. In this case, you cannot
access them from this function.

As a convenient feature, map entities can also be accessed directly
through the environment of the \ref lua_api_map_overview_files "map script".
In other words, you can just write <tt>bob:get_position()</tt> as an
equivalent to <tt>map:get_entity("bob"):get_position()</tt>.
- \c name (string): Name of the map entity to get.
- Return value (\ref lua_api_entity "entity"): The corresponding entity,
  or \c nil if there exists no entity with this name on the map.

\remark Technical note for curious Lua experts:
  the mechanism that makes map entities
  directly accessible in the map script environment is lazy
  (it is implemented as an \c __index metamethod). Entities are imported
  to the Lua side only when your script requests them.
  If you have thousands of named entities in your map, you won't have
  thousands of useless objects living in Lua.
  Only the ones your script tries to access are imported.

\subsection lua_api_map_has_entity map:has_entity(name)

Returns whether there currently exists a
\ref lua_api_entity "map entity" with the specified name on the map.
- \c name (string): Name of the \ref lua_api_entity "map entity" to check.
- Return value (boolean): \c true if such an entity exists.

\remark Equivalent to <tt>map:get_entity(name) ~= nil</tt> (but a bit
  lighter because it avoids to export the entity to Lua).

\subsection lua_api_map_get_entities map:get_entities([prefix])

Returns an iterator to all \ref lua_api_entity "map entities"
whose name has the specified prefix.

The typical usage of this function is:
\verbatim
for entity in map:get_entities("your_prefix") do
  -- some code related to the entity
end
\endverbatim
- \c prefix (string, optional): Prefix of the entities to get.
  No value means all entities (equivalent to an empty prefix).
- Return value (function): An iterator to all entities with this prefix.
  Entities are returned in Z order (insertion order).

\subsection lua_api_map_get_entities_count map:get_entities_count(prefix)

Returns the number of \ref lua_api_entity "map entities"
having the specified prefix.
- \c prefix (string): Prefix of the entities to count.
- Return value (number): The number of entities having this prefix on the map.

\subsection lua_api_map_has_entities map:has_entities(prefix)

Returns whether there exists at least one \ref lua_api_entity
"map entity" having the specified prefix.

This function can be used for example to checker whether a group of
\ref lua_api_enemy "enemies" is dead.
- \c prefix (string): Prefix of the entities to check.
- Return value (boolean): \c true if at least one entity with this prefix
  exists on the map.

\remark Equivalent to <tt>map:get_entities_count(prefix) > 0</tt> but faster
  when there are a lot of entities
  (because it stops searching as soon as there is a match).

\subsection lua_api_map_get_entities_by_type map:get_entities_by_type(type)

Returns an iterator to all \ref lua_api_entity "map entities"
of the given type on the map.

The typical usage of this function is:
\verbatim
for entity in map:get_entities_by_type(type) do
  -- some code related to the entity
end
\endverbatim
- \c type (string): Name of an entity type.
  See \ref lua_api_entity_get_type "entity:get_type()"
  for the possible values.

\subsection lua_api_map_get_entities_in_rectangle map:get_entities_in_rectangle(x, y, width, height)

Returns an iterator to all \ref lua_api_entity "map entities"
whose maximum bounding box intersects the given rectangle.
The maximum bounding box is the union of the entity's own
\ref lua_api_entity_get_bounding_box "bounding box"
and of the bounding boxes from its sprites.

The typical usage of this function is:
\verbatim
for entity in map:get_entities_in_rectangle(x, y, width, height) do
  -- some code related to the entity
end
\endverbatim
- \c x (number): X coordinate of the rectangle's upper-left corner.
- \c y (number): Y coordinate of the rectangle's upper-left corner.
- \c width (number): Width of the rectangle.
- \c height (number): Height of the rectangle.
- Return value (function): An iterator to all entities intersecting the rectangle.
  Entities are returned in Z order (insertion order).

\subsection lua_api_map_get_entities_in_region map:get_entities_in_region(x, y), map:get_entities_in_region(entity)

Returns an iterator to all \ref lua_api_entity "map entities"
that are in a region.
Regions of the map are defined by the position of
\ref lua_api_separator "separators" and map limits.
The region of an entity is the one of its center point.

Regions should be rectangular.
Non-convex regions, for example with an "L" shape, are not supported by this
function.

The typical usage of this function is:
\verbatim
for entity in map:get_entities_in_region(my_entity) do
  -- some code related to the entity
end
\endverbatim

To get entities in the same region as a point:
- \c x (number): X coordinate of the region to get.
- \c y (number): Y coordinate of the region to get.
- Return value (function): An iterator to all entities in the same region as
  the point.

To get entities in the same region as another entity:
- \c entity (entity): An entity.
- Return value (function): An iterator to all other entities in the same region.

\subsection lua_api_map_get_hero map:get_hero()

Returns the \ref lua_api_hero "hero".
- Return value (\ref lua_api_hero "hero"): The hero.

\remark Equivalent to <tt>map:get_entity("hero")</tt> but shorter to write.
  This function is provided for convenience as getting the hero is often
  needed.

\subsection lua_api_map_set_entities_enabled map:set_entities_enabled(prefix, [enabled])

Enables or disables all \ref lua_api_entity "map entities" having
the specified prefix.

Disabled entities are not displayed and are not updated.
Therefore, they don't move and their collisions are no longer detected.
But they still exist and can be enabled back later.
- \c prefix (string): Prefix of the entities to change.
- \c enable (boolean, optional): \c true to enable them, \c false to disable them.
  No value means \c true.

\remark Equivalent to calling \ref lua_api_entity_set_enabled
  "entity:set_enabled()" on a group of entities.

\subsection lua_api_map_remove_entities map:remove_entities(prefix)

Removes and destroys all \ref lua_api_entity "map entities"
having the specified prefix.

Once an entity is removed, it is destroyed and it no longer exists on the map.
A good practice is to avoid keeping references to destroyed entities in your
scripts so that they can be garbage-collected by Lua.
- \c prefix (string): Prefix of the entities to remove from the map.

\remark Equivalent to calling \ref lua_api_entity_remove
  "entity:remove()" on a group of entities.

\subsection lua_api_map_create_destination map:create_destination(properties)

Creates an entity of type
\ref lua_api_destination "destination"
on the map.
- \c properties (table): A table that describles all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c direction (number): Direction that the hero should take when arriving on
    the destination, between \c 0 (East) and \c 3 (South), or \c -1 to keep
    his direction unchanged.
  - \c sprite (string, optional): Id of the animation set of a
    \ref lua_api_sprite "sprite" to create for the destination.
    No value means no sprite (the destination will then be invisible).
  - \c save_location (string, optional): Whether to update the
    \ref lua_api_game_set_starting_location "starting location"
    of the player when arriving to this destination.
    If yes, when the player restarts his game, he will restart at this
    destination.
    Must be one of:
    - \c "when_world_changes" (default): Updates the starting location if the
      current \ref lua_api_map_get_world "world"
      has just changed when arriving to this destination.
    - \c "yes": Updates the starting location.
    - \c "no": Does not update the starting location.
  - \c default (boolean, optional): Sets this destination as the default one
    when teletransporting the hero to this map without destination specified.
    No value means \c false.
    Only one destination can be the default one on a map.
    If no default destination is set, then the first one declared becomes the
    default one.
- Return value (\ref lua_api_destination "destination"): The destination
  created.

\subsection lua_api_map_create_teletransporter map:create_teletransporter(properties)

Creates an entity of type
\ref lua_api_teletransporter "teletransporter"
on the map.
- \c properties (table): A table that describles all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c width (number): Width of the entity in pixels.
  - \c height (number): Height of the entity in pixels.
  - \c sprite (string, optional): Id of the animation set of a
    \ref lua_api_sprite "sprite" to create for the teletransporter.
    No value means no sprite (the teletransporter will then be invisible).
  - \c sound (string, optional): Sound to \ref lua_api_audio_play_sound
    "play" when the \ref lua_api_hero "hero" uses the
    teletransporter. No value means no sound.
  - \c transition (string, optional): Style of transition to play when
    the hero uses the teletransporter. Must be one of:
    - \c "immediate": No transition.
    - \c "fade": Fade-out and fade-in effect.
    - \c "scrolling": Scrolling between maps.
    The default value is \c "fade".
  - \c destination_map (string): Id of the map to transport to (can be
    the id of the current map).
  - \c destination (string, optional): Location on the destination map.
    Can be the name of a \ref lua_api_destination "destination" entity,
    the special value \c "_same" to keep the hero's coordinates,
    or the special value \c "_side" to place on hero on the corresponding side
    of an adjacent map (normally used with the scrolling transition style).
    No value means the default destination entity of the map.
- Return value (\ref lua_api_teletransporter "teletransporter"): The
  teletransporter created.

\subsection lua_api_map_create_pickable map:create_pickable(properties)

Creates an entity of type
\ref lua_api_pickable "pickable treasure"
on the map.
- \c properties (table): A table that describles all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c treasure_name (string, optional): Kind of treasure to create
    (the name of an \ref lua_api_item "equipment item").
    If this value is not set, or corresponds to a
    \ref lua_api_item_is_obtainable "non-obtainable" item, then
    no entity is created and \c nil is returned.
  - \c treasure_variant (number, optional): Variant of the treasure
    (because some \ref lua_api_item "equipment items"
    may have several variants).
    The default value is \c 1 (the first variant).
  - \c treasure_savegame_variable (string, optional): Name of the boolean
    value that stores in the \ref lua_api_game "savegame"
    whether this pickable treasure was found.
    No value means that the treasure is not saved.
    If the treasure is saved and the player already has it, then no entity
    is be created and \c nil is returned.
- Return value (\ref lua_api_pickable "pickable treasure"): The pickable
  treasure created, or \c nil if the item is not set, not
  \ref lua_api_item_is_obtainable "obtainable", or if the pickable treasure is
  already found (for a saved one).

\subsection lua_api_map_create_destructible map:create_destructible(properties)

Creates an entity of type
\ref lua_api_destructible "destructible object"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c treasure_name (string, optional): Kind of
    \ref lua_api_pickable "pickable treasure" to hide in the
    destructible object
    (the name of an \ref lua_api_item "equipment item").
    If this value is not set, then
    no treasure is placed in the destructible object.
    If the treasure is not obtainable when the object is destroyed,
    no pickable treasure is created.
  - \c treasure_variant (number, optional): Variant of the treasure if any
    (because some \ref lua_api_item "equipment items"
    may have several variants).
    The default value is \c 1 (the first variant).
  - \c treasure_savegame_variable (string, optional): Name of the boolean
    value that stores in the \ref lua_api_game "savegame"
    whether the \ref lua_api_pickable "pickable treasure"
    hidden in the destructible object was found.
    No value means that the treasure (if any) is not saved.
    If the treasure is saved and the player already has it, then no
    treasure is put in the destructible object.
  - \c sprite (string): Name of the animation set of a
    \ref lua_api_sprite "sprite" to create for the destructible object.
  - \c destruction_sound (string, optional): Sound to
    \ref lua_api_audio_play_sound
    "play" when the destructible object is cut or broken after being thrown.
    No value means no sound.
  - \c weight (number, optional): Level of \c "lift"
    \ref lua_api_game_get_ability "ability" required to lift the object.
    \c 0 allows the player to lift the object unconditionally.
    The special value \c -1 means that the object can never be lifted.
    The default value is \c 0.
  - \c can_be_cut (boolean, optional): Whether the hero can cut the object
    with the sword. No value means \c false.
  - \c can_explode (boolean, optional): Whether the object should explode
    when it is cut, hit by a weapon and after a delay when the hero lifts it.
    The default value is \c false.
  - \c can_regenerate (boolean, optional): Whether the object should
    automatically regenerate after a delay when it is destroyed.
    The default value is \c false.
  - \c damage_on_enemies (number, optional): Number of life points to remove
    from an enemy that gets hit by this object after the
    \ref lua_api_hero "hero" throws it.
    If the value is \c 0, enemies will ignore the object.
    The default value is \c 1.
  - \c ground (string, optional): Ground defined by this entity.
    The ground is usually \c "wall", but you may set \c "traversable"
    to make the object traversable, or for example \c "grass" to make it
    traversable too but with an additional grass sprite below the hero.
    The default value is \c "wall".
- Return value (\ref lua_api_destructible "destructible object"): The
  destructible object created.

\remark The state of the \ref lua_api_pickable "pickable treasure"
  placed in the destructible
  object (obtained or not)
  and the possessed variant of the \ref lua_api_item "item"
  (a number)
  are two independent values that have different meanings
  and are saved separately.

\subsection lua_api_map_create_chest map:create_chest(properties)

Creates an entity of type
\ref lua_api_chest "treasure chest"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c treasure_name (string, optional): Kind of treasure to place in the chest
    (the name of an \ref lua_api_item "equipment item").
    If this value is not set, then the chest will be empty.
    If the treasure is not obtainable when the hero opens the chest, it
    becomes empty.
  - \c treasure_variant (number, optional): Variant of the treasure
    (because some \ref lua_api_item "equipment items"
    may have several variants).
    The default value is \c 1 (the first variant).
  - \c treasure_savegame_variable (string, optional): Name of the boolean
    value that stores in the \ref lua_api_game "savegame"
    whether this chest is open.
    No value means that the state of the treasure is not saved.
    If the treasure is saved and the player already has it, then no
    treasure is placed in the chest (the chest will appear open).
  - \c sprite (string): Name of the animation set of the
    \ref lua_api_sprite "sprite" to create for the chest.
    The sprite must have animations \c "open" and \c "closed".
  - \c opening_method (string, optional): Specifies the permissions for the
    hero to open the chest. Must be one of:
    - \c "interaction" (default): Can be opened by pressing the
      \ref lua_api_game_overview_commands "action command" in front of it.
    - \c "interaction_if_savegame_variable": Can be opened by pressing the
      \ref lua_api_game_overview_commands "action command" in front of it,
      provided that a specific savegame variable is set.
    - \c "interaction_if_item": Can be opened by pressing the
      \ref lua_api_game_overview_commands "action command" in front of it,
      provided that the player has a specific \ref lua_api_item
      "equipment item".
  - \c opening_condition (string, optional): The condition required to open the
    chest.
    Only for opening methods \c "interaction_if_savegame_variable" and
    \c "interaction_if_item".
    - For opening method \c "interaction_if_savegame_variable",
      it must be the name of a savegame variable.
      The \ref lua_api_hero "hero"
      will be allowed to open the chest if this saved value is either
      \c true, an integer greater than zero or a non-empty string.
    - For opening method \c "interaction_if_item",
      it must be the name of an \ref lua_api_item "equipment item".
      The hero will be allowed to open the chest if he has that item and,
      for items with an amount, if the amount is greater than zero.
    - For the default opening method (\c "interaction"),
      this setting has no effect.
  - \c opening_condition_consumed (boolean, optional): Whether opening the
    chest should consume the savegame variable or the \ref lua_api_item
    "equipment item" that was required.
    The default setting is \c false.
    If you set it to \c true, the following rules are applied when the
    \ref lua_api_hero "hero" successfully opens the chest:
    - For opening method \c "interaction_if_savegame_variable",
      the savegame variable that was required is reset to \c false,
      \c 0 or \c "" (depending on its type).
    - For opening method is \c "interaction_if_item", the equipment
      item that was required is removed. This means setting its
      \ref lua_api_item_set_variant "possessed variant" to \c 0, unless it has
      an associated amount: in this case, the amount is decremented.
  - \c cannot_open_dialog (string, optional): Id of the dialog to show
    if the hero fails to open the chest.
    If you don't set this value, no dialog is shown.
- Return value (\ref lua_api_chest "chest"): The treasure chest created.

\remark The state of the \ref lua_api_chest "treasure chest"
  (obtained or not)
  and the possessed variant of its \ref lua_api_item "item"
  are two independent values that have different meanings
  and are saved separately.

\subsection lua_api_map_create_jumper map:create_jumper(properties)

Creates an entity of type
\ref lua_api_jumper "jumper"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c width (number): Width of the entity in pixels.
  - \c height (number): Height of the entity in pixels.
  - \c direction (number): Direction of the jump, between \c 0 (East)
    and \c 7 (South-East).
    If the direction is horizontal, the width must be \c 8 pixels.
    If the direction is vertical, the height must be \c 8 pixels.
    If the direction is diagonal, the size must be square.
  - \c jump_length (number): Length of the baseline of the jump in pixels
    (see the \ref lua_api_jump_movement "jump movement" page for details).
- Return value (\ref lua_api_jumper "jumper"): The jumper created.

\subsection lua_api_map_create_enemy map:create_enemy(properties)

Creates an entity of type
\ref lua_api_enemy "enemy"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c direction (number): Initial direction of the enemy, between
    \c 0 (East) and \c 3 (South).
  - \c breed (string): Model of enemy to create.
  - \c savegame_variable (string, optional): Name of the boolean value that
    stores in the \ref lua_api_game "savegame" whether this enemy is dead.
    No value means that the enemy is not saved.
    If the enemy is saved and was already killed, then no enemy is created.
    Instead, its \ref lua_api_pickable "pickable treasure" is created if it
    is a saved one.
  - \c treasure_name (string, optional): Kind of
    \ref lua_api_pickable "pickable treasure" to drop when the
    enemy is killed
    (the name of an \ref lua_api_item "equipment item").
    If this value is not set, then the enemy won't drop anything.
    If the treasure is not obtainable when the enemy is killed,
    then nothing is dropped either.
  - \c treasure_variant (number, optional): Variant of the treasure
    (because some \ref lua_api_item "equipment items"
    may have several variants).
    The default value is \c 1 (the first variant).
  - \c treasure_savegame_variable (string, optional): Name of the boolean
    value that stores in the \ref lua_api_game "savegame"
    whether the \ref lua_api_pickable "pickable treasure"
    of this enemy was obtained.
    No value means that the state of the treasure is not saved.
    If the treasure is saved and the player already has it, then the
    enemy won't drop anything.
- Return value (\ref lua_api_enemy "enemy" or \ref lua_api_pickable
  "pickable treasure"): The enemy created, except when it is a saved enemy
  that is already dead.
  In this case, if the enemy dropped a saved
  treasure that is not obtained yet, this
  \ref lua_api_pickable "pickable treasure" is created and returned.
  Otherwise, \c nil is returned.

\remark The state of the \ref lua_api_enemy "enemy" (alive or dead),
  the state of its \ref lua_api_pickable "treasure dropped"
  (obtained or not)
  and the possessed variant of the \ref lua_api_item "item" dropped (a number)
  are three independent values that have different meanings and
  are saved separately.

\subsection lua_api_map_create_npc map:create_npc(properties)

Creates an entity of type
\ref lua_api_npc "non-playing character" (NPC)
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c direction (number): Initial direction of the NPC's sprite, between
    \c 0 (East) and \c 3 (South).
  - \c subtype (number): Kind of NPC to create: \c 1 for a usual NPC who the
    player can talk to,
    \c 0 for a generalized NPC (not necessarily a person).
    See the \ref lua_api_npc "NPC documentation" for more details.
  - \c sprite (string, optional): Name of the animation set of a
    \ref lua_api_sprite "sprite" to create for the NPC.
    No value means no sprite (the NPC will then be invisible).
  - \c behavior (string, optional): What to do when there is an interaction
    with the NPC.
    - \c "dialog#XXXX": Starts the dialog with id \c XXXX when the player
      talks to this NPC.
    - \c "map" (default): Forwards events to the map script
      (for example, calls the \ref lua_api_npc_on_interaction
      "on_interaction()" event of the NPC).
    - \c "item#XXXX": Forwards events to an \ref lua_api_item
      "equipment item" script
      (for example, calls the \ref lua_api_item_on_npc_interaction
      "on_interaction()" event of the equipment item with id \c XXXX).
- Return value (\ref lua_api_npc "NPC"): the NPC created.

\subsection lua_api_map_create_block map:create_block(properties)

Creates an entity of type
\ref lua_api_block "block"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c direction (number, optional): The only direction where the block can be
    moved, between \c 0 (East) and \c 3 (South).
    No value means no restriction and allows the block to be moved in any of the
    four main directions.
  - \c sprite (string): Name of the animation set of a
    \ref lua_api_sprite "sprite" to create for the block.
  - \c pushable (boolean): \c true to allow the block to be pushed.
  - \c pullable (boolean): \c true to allow the block to be pulled.
  - \c maximum_moves (number): \c Indicates how many times the block can be
    moved (\c 0: none, \c positive: that number, \c nil: infinite).
- Return value (\ref lua_api_block "block"): the block created.

\subsection lua_api_map_create_dynamic_tile map:create_dynamic_tile(properties)

Creates an entity of type
\ref lua_api_dynamic_tile "dynamic tile"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate of the top-left corner of the dynamic tile on
    the map.
  - \c y (number): Y coordinate of the top-left corner of the dynamic tile on
    the map.
  - \c width (number): Width of the dynamic tile in pixels. The tile pattern
    will be repeated horizontally to fit to this width.
  - \c height (number): Height of the entity in pixels. The tile pattern
    will be repeated vertically to fit to this height.
  - \c tile_pattern_id (string): Id of the tile pattern to use from
    the tileset.
  - \c enabled_at_start (boolean): \c true to make the dynamic tile initially
    enabled, \c false to make it initially disabled.
- Return value (\ref lua_api_dynamic_tile "dynamic tile"): the dynamic tile
  created.

\subsection lua_api_map_create_switch map:create_switch(properties)

Creates an entity of type
\ref lua_api_switch "switch"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c subtype (string): Kind of switch to create:
    - \c "walkable": A traversable pressure plate that gets activated when the
      hero walks on it.
    - \c "solid": A non-traversable, solid switch that can be activated in
      various conditions: by the sword, by an explosion
      or by a projectile (a thrown object, an arrow, the boomerang or the
      hookshot).
    - \c "arrow_target" A switch that can be only activated by shooting an
      arrow on it.
  - \c sprite (string): Name of the animation set of a
    \ref quest_sprite_data_file "sprite" to create for the switch.
    The animation set must at least contain animations
    \c "activated" and \c "inactivated".
    No value means no sprite.
  - \c sound (string, optional): Sound to play
    when the switch is activated.
    No value means no sound.
  - \c inactivate_when_leaving (boolean): If \c true, the switch becomes
    inactivated when the \ref lua_api_hero "hero" or the \ref
    lua_api_block "block"
    leaves it (only for a walkable switch).
- Return value (\ref lua_api_switch "switch"): the switch created.

\subsection lua_api_map_create_wall map:create_wall(properties)

Creates an entity of type
\ref lua_api_wall "wall"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c width (number): Width of the entity in pixels.
  - \c height (number): Height of the entity in pixels.
  - \c stops_hero (boolean, optional): \c true to make the wall stop the
    \ref lua_api_hero "hero".
    No value means \c false.
  - \c stops_npcs (boolean, optional): \c true to make the wall stop
    \ref lua_api_npc "non-playing characters".
    No value means \c false.
  - \c stops_enemies (boolean, optional): \c true to make the wall stop
    \ref lua_api_enemy "enemies".
    No value means \c false.
  - \c stops_blocks (boolean, optional): \c true to make the wall stop
    \ref lua_api_block "blocks".
    No value means \c false.
  - \c stops_projectiles (boolean, optional): \c true to make the wall stop
    projectiles:
    \ref lua_api_carried_object "thrown objects",
    \ref lua_api_arrow "arrows",
    the \ref lua_api_hookshot "hookshot"
    and
    \ref lua_api_boomerang "the boomerang".
    No value means \c false.
- Return value (\ref lua_api_wall "wall"): the wall created.

\subsection lua_api_map_create_sensor map:create_sensor(properties)

Creates an entity of type
\ref lua_api_sensor "sensor"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c width (number): Width of the entity in pixels.
  - \c height (number): Height of the entity in pixels.
- Return value (\ref lua_api_sensor "sensor"): the sensor created.

\subsection lua_api_map_create_crystal map:create_crystal(properties)

Creates an entity of type
\ref lua_api_crystal "crystal"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
- Return value (\ref lua_api_crystal "crystal"): the crystal created.

\subsection lua_api_map_create_crystal_block map:create_crystal_block(properties)

Creates an entity of type
\ref lua_api_crystal_block "crystal block"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c width (number): Width of the entity in pixels.
  - \c height (number): Height of the entity in pixels.
  - \c subtype (number): Kind of crystal block to create: \c 0 for a
    block initially lowered (orange), \c 1 for a block initially raised (blue).
- Return value (\ref lua_api_crystal_block "crystal block"): the crystal block
  created.

\subsection lua_api_map_create_shop_treasure map:create_shop_treasure(properties)

Creates an entity of type
\ref lua_api_shop_treasure "shop treasure"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c price (number): Money amount required to buy the treasure.
  - \c font (string, optional): Id of the font to use to display to price.
    The default value is the first one in alphabetical order.
  - \c dialog (string): Id of the dialog to show when the
    \ref lua_api_hero "hero" asks for information about the treasure.
  - \c treasure_name (string): Kind of treasure to sell
    (the name of an \ref lua_api_item "equipment item").
    If this value or corresponds to a
    \ref lua_api_item_is_obtainable "non-obtainable" item, then
    the shop treasure is not created and \c nil is returned.
  - \c treasure_variant (number, optional): Variant of the treasure
    (because some \ref lua_api_item "equipment items"
    may have several variants).
    The default value is \c 1 (the first variant).
  - \c treasure_savegame_variable (string, optional): Name of the boolean
    value that stores in the \ref lua_api_game "savegame"
    whether the player has purchased this treasure.
    No value means that the state of the treasure is not saved.
    If the treasure is saved and the player already has it, then the
    shop treasure is not created and \c nil is returned.
- Return value (\ref lua_api_shop_treasure "shop treasure"): The shop
  treasure created, or \c nil if the item is not
  \ref lua_api_item_is_obtainable "obtainable", or if the shop treasure was
  already purchased (for a saved one).

\remark The state of the \ref lua_api_shop_treasure
  "shop treasure" (purchased or not)
  and the possessed variant of its \ref lua_api_item "item"
  (a number)
  are two independent values that have different meanings
  and are saved separately.

\subsection lua_api_map_create_stream map:create_stream(properties)

Creates an entity of type
\ref lua_api_stream "stream"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c direction (number): Direction where the stream moves the
    \ref lua_api_hero "hero",
    between \c 0 (East) and \c 7 (South-East).
  - \c sprite (string, optional): Id of the animation set of a
    \ref quest_sprite_data_file "sprite" to create for the stream.
    No value means no sprite (the stream will then be invisible).
  - \c speed (number, optional): Speed of the movement applied to the hero by
    the stream, in pixels per second.
    The default value is \c 64.
  - \c allow_movement (boolean, optional): Whether the player can still move the
    hero when he is on the stream.
    The default value is \c true.
  - \c allow_attack (boolean, optional): Whether the player can use the sword
    when he is on the stream.
    The default value is \c true.
  - \c allow_item (boolean, optional): Whether the player can use equipment
    items when he is on the stream.
    The default value is \c true.
- Return value (\ref lua_api_stream "stream"): the
  stream created.

\subsection lua_api_map_create_door map:create_door(properties)

Creates an entity of type
\ref lua_api_door "door"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c direction (number): Direction of the door, between
    \c 0 (East of the room) and \c 3 (South of the room).
  - \c sprite (string): Name of the animation set of the
    \ref lua_api_sprite "sprite" to create for the door.
    The sprite must have an animation \c "closed", that will be shown while
    the door is closed.
    When the door is open, no sprite is displayed.
    Optionally, the sprite can also have animations \c "opening"
    and \c "closing",
    that will be shown (if they exist) while the door is being opened or closed,
    respectively. If they don't exist, the door will open close instantly.
  - \c savegame_variable (string, optional): Name of the boolean value that
    stores in the \ref lua_api_game "savegame" whether this door is open.
    No value means that the door is not saved.
    If the door is saved as open, then it appears open.
  - \c opening_method (string, optional): How the door is supposed to be
    opened by the player. Must be one of:
    - \c "none" (default): Cannot be opened by the player. You can only open it
      from Lua.
    - \c "interaction": Can be opened by pressing the
      \ref lua_api_game_overview_commands "action command" in front of it.
    - \c "interaction_if_savegame_variable": Can be opened by pressing the
      \ref lua_api_game_overview_commands "action command" in front of it,
      provided that a specific savegame variable is set.
    - \c "interaction_if_item": Can be opened by pressing the
      \ref lua_api_game_overview_commands "action command" in front of it,
      provided that the player has a specific \ref lua_api_item
      "equipment item".
    - \c "explosion": Can be opened by an explosion.
  - \c opening_condition (string, optional): The condition required to open the
    door.
    Only for opening methods \c "interaction_if_savegame_variable" and
    \c "interaction_if_item".
    - For opening method \c "interaction_if_savegame_variable",
      it must be the name of a savegame variable.
      The \ref lua_api_hero "hero"
      will be allowed to open the door if this saved value is either
      \c true, an integer greater than zero or a non-empty string.
    - For opening method \c "interaction_if_item",
      it must be the name of an \ref lua_api_item "equipment item".
      The hero will be allowed to open the door if he has that item and,
      for items with an amount, if the amount is greater than zero.
    - For other opening methods, this setting has no effect.
  - \c opening_condition_consumed (boolean, optional): Whether opening the
    door should consume the savegame variable or the \ref lua_api_item
    "equipment item" that was required.
    The default setting is \c false.
    If you set it to \c true, the following rules are applied when the
    \ref lua_api_hero "hero" successfully opens the door:
    - For opening method \c "interaction_if_savegame_variable",
      the savegame variable that was required is reset to \c false,
      \c 0 or \c "" (depending on its type).
    - For opening method is \c "interaction_if_item", the equipment
      item that was required is removed. This means setting its
      \ref lua_api_item_set_variant "possessed variant" to \c 0, unless it has
      an associated amount: in this case, the amount is decremented.
    - With other opening methods, this setting has no effect.
  - \c cannot_open_dialog (string, optional): Id of the dialog to show
    if the hero fails to open the door.
    If you don't set this value, no dialog is shown.
- Return value (\ref lua_api_door "door"): The \ref lua_api_door
  "door" created.

\subsection lua_api_map_create_stairs map:create_stairs(properties)

Creates an entity of type
\ref lua_api_stairs "stairs"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c direction (number): Direction where the stairs should be turned
    between \c 0 (East of the room) and \c 3 (South of the room).
    For stairs inside a single floor, this is the direction of going upstairs.
  - \c subtype (number): Kind of stairs to create:
    - \c 0: Spiral staircase going upstairs.
    - \c 1: Spiral staircase going downstairs.
    - \c 2: Straight staircase going upstairs.
    - \c 3: Straight staircase going downstairs.
    - \c 4: Small stairs inside a single floor (change the layer of the
      \ref lua_api_hero "hero").
- Return value (\ref lua_api_stairs "stairs"): the
  stairs created.

\subsection lua_api_map_create_bomb map:create_bomb(properties)

Creates an entity of type
\ref lua_api_bomb "bomb"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
- Return value (\ref lua_api_bomb "bomb"): the
  bomb created.

\subsection lua_api_map_create_explosion map:create_explosion(properties)

Creates an entity of type
\ref lua_api_explosion "explosion"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
- Return value (\ref lua_api_explosion "explosion"): the
  explosion created.

\subsection lua_api_map_create_fire map:create_fire(properties)

Creates an entity of type
\ref lua_api_fire "fire"
on the map.
- \c properties (table): A table that describes all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
- Return value (\ref lua_api_fire "fire"): the
  fire created.

\subsection lua_api_map_create_separator map:create_separator(properties)

Creates an entity of type
\ref lua_api_separator "separator"
on the map.
- \c properties (table): A table that describles all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c width (number): Width of the entity in pixels.
  - \c height (number): Height of the entity in pixels.
    One of \c width or \c height must be 16 pixels.
- Return value (\ref lua_api_separator "separator"): The
  separator created.

\subsection lua_api_map_create_custom_entity map:create_custom_entity(properties)

Creates an entity of type
\ref lua_api_custom_entity "custom entity"
on the map.
- \c properties (table): A table that describles all properties of the entity
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity or \c nil.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
  - \c direction (number): Direction of the custom entity, between \c 0 (East)
    and \c 3 (South).
    This direction will be applied to the entity's sprites if possible.
  - \c layer (number): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
  - \c x (number): X coordinate on the map.
  - \c y (number): Y coordinate on the map.
  - \c width (number): Width of the entity in pixels
    (default \c 16).
  - \c height (number): Height of the entity in pixels
    (default \c 16).
  - \c sprite (string, optional): Name of the animation set of a
    \ref lua_api_sprite "sprite" to create for the custom entity.
  - \c model (string, optional): Model of custom entity or \c nil.
    The model is the name of a Lua script in the \c "entities" directory of
    your quest. It will define the behavior of your entity.
    This script will be called with the entity as parameter.
    Models are useful when you need to create lots of similar entities,
    especially in different maps.
    \c nil means no model: in this case, no particular script will be called
    but you can still define the behavior of your entity in the map script.
- Return value (\ref lua_api_custom_entity "custom entity"): The
  custom entity created.

\section lua_api_map_events Events of a map

Events are callback methods automatically called by the engine if you define
them.
In the case of maps, they are only called on the current map.

\subsection lua_api_map_on_started map:on_started(destination)

Called when this map starts (when the player enters it).
- \c destination (\ref lua_api_destination "destination"): The destination
  entity from where the \ref lua_api_hero "hero" arrives on the map,
  or \c nil if he used another way than a destination entity
  (like the side of the map or direct coordinates).

\subsection lua_api_map_on_finished map:on_finished()

Called when this map stops (when the player leaves it).

\subsection lua_api_map_on_update map:on_update()

Called at each cycle of the main loop while this map is the current one.

\remark As this function is called at each cycle, it is recommended to use other
solutions when possible, like \ref lua_api_timer "timers" and other events.

\subsection lua_api_map_on_draw map:on_draw(dst_surface)

Called when the map has just been redrawn by the engine.

The engine has already drawn the map, but not the
\ref lua_api_menu "menus" of this map if any.
Use this event if you want to draw some additional content on the map
before the menus, for example an overlay.
- \c dst_surface (\ref lua_api_surface "surface"): The surface where the map
  is drawn. This surface represents the visible part of the screen, not the
  whole map.

\subsection lua_api_map_on_suspended map:on_suspended(suspended)

Called when the map has just been suspended or resumed.

The map is suspended by the engine in a few cases, like when the \ref
lua_api_game "game" is
paused or when the camera is being moved by a script.
When this happens, all \ref lua_api_entity "map entities" stop moving and most
\ref lua_api_sprite "sprites" stop their animation.
- \c suspended (boolean): \c true if the map was just suspended, \c
  false if it was resumed.

\subsection lua_api_map_on_opening_transition_finished map:on_opening_transition_finished(destination)

When the map begins, called when the opening transition effect finishes.
After that moment, the player has the control of the \ref
lua_api_hero "hero".
- \c destination (\ref lua_api_destination "destination"): The destination
  entity from where the \ref lua_api_hero "hero" arrived on the map,
  or \c nil if he used another way than a destination entity
  (like the side of the map or direct coordinates).

\subsection lua_api_map_on_obtaining_treasure map:on_obtaining_treasure(treasure_item, treasure_variant, treasure_savegame_variable)

Called when the \ref lua_api_hero "hero" is obtaining a treasure on this map,
before the treasure's dialog (if any).
- \c treasure_item (\ref lua_api_item "item"): Equipment item being obtained.
- \c treasure_variant (number): Variant of the treasure
  (because some \ref lua_api_item "equipment items"
  may have several variants).
- \c treasure_savegame_variable (string): Name of the boolean
  value that stores in the \ref lua_api_game "savegame"
  whether this treasure is found,
  or \c nil if this treasure is not saved.

\subsection lua_api_map_on_obtained_treasure map:on_obtained_treasure(treasure_item, treasure_variant, treasure_savegame_variable)

Called after the \ref lua_api_hero "hero" has obtained a treasure on this map.

In the case of a brandished treasure, this event is called once the
treasure's dialog is finished.
Otherwise, it is called immediately after
\ref lua_api_map_on_obtaining_treasure "map:on_obtaining_treasure()".
- \c treasure_item (\ref lua_api_item "item"): Equipment item being obtained.
- \c treasure_variant (number): Variant of the treasure
  (because some \ref lua_api_item "equipment items"
  may have several variants).
- \c treasure_savegame_variable (string): Name of the boolean
  value that stores in the \ref lua_api_game "savegame"
  whether this treasure is found,
  or \c nil if this treasure is not saved.

\subsection lua_api_map_on_key_pressed map:on_key_pressed(key, modifiers)

Called when the user presses a keyboard key while your map is active.
- \c key (string): Name of the raw key that was pressed.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible table keys are \c "shift", \c "control" and
  \c "alt". Table values don't matter.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.
  If you return \c false or nothing, the event will continue its propagation
  to the \ref lua_api_game_overview_commands "commands".

\remark This event indicates the raw keyboard key pressed. If you want the
corresponding character instead (if any), see
\ref lua_api_map_on_character_pressed "map:on_character_pressed()".
If you want the corresponding higher-level game command (if any), see
\ref lua_api_map_on_command_pressed "map:on_command_pressed()".

\subsection lua_api_map_on_key_released map:on_key_released(key, modifiers)

Called when the user releases a keyboard key while your map is active.
- \c key (string): Name of the raw key that was released.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible table keys are \c "shift", \c "control" and
  \c "alt". Table values don't matter.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.
  If you return \c false or nothing, the event will continue its propagation
  to the \ref lua_api_game_overview_commands "commands".

\remark This event indicates the raw keyboard key pressed. If you want the
corresponding character instead (if any), see
\ref lua_api_map_on_character_pressed "map:on_character_pressed()".
If you want the corresponding higher-level game command (if any), see
\ref lua_api_map_on_command_pressed "map:on_command_pressed()".

\subsection lua_api_map_on_character_pressed map:on_character_pressed(character)

Called when the user enters text
while your map is active.
- \c character (string): A utf-8 string representing the character that was
  pressed.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.
  If you return \c false or nothing, the event will continue its propagation
  to the \ref lua_api_game_overview_commands "commands".

\remark When a character key is pressed, two events are called:
\ref lua_api_map_on_key_pressed "map:on_key_pressed()"
(indicating the raw key)
and \ref lua_api_map_on_character_pressed "map:on_character_pressed()"
(indicating the utf-8 character).
If your script needs to input text from the user,
\ref lua_api_map_on_character_pressed "map:on_character_pressed()"
is what you want because it
considers the keyboard's layout and gives you international utf-8
strings.

\subsection lua_api_map_on_joypad_button_pressed map:on_joypad_button_pressed(button)

Called when the user presses a joypad button while your map is active.
- \c button (number): Index of the button that was pressed.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_map_on_joypad_button_released map:on_joypad_button_released(button)

Called when the user releases a joypad button while your map is active.
- \c button (number): Index of the button that was released.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_map_on_joypad_axis_moved map:on_joypad_axis_moved(axis, state)

Called when the user moves a joypad axis while your map is active.
- \c axis (number): Index of the axis that was moved. Usually, \c 0 is an
  horizontal axis and \c 1 is a vertical axis.
- \c state (number): The new state of the axis that was moved. \c -1 means
  left or up, \c 0 means centered and \c 1 means right or down.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_map_on_joypad_hat_moved map:on_joypad_hat_moved(hat, direction8)

Called when the user moves a joypad hat while your map is active.
- \c hat (number): Index of the hat that was moved.
- \c direction8 (number): The new direction of the hat. \c -1 means that the
  hat is centered. \c 0 to \c 7 indicates that the hat is in one of the eight
  main directions.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_map_on_command_pressed map:on_command_pressed(command)

Called when the player presses a \ref lua_api_game_overview_commands
"game command"
(a keyboard key or a joypad action mapped to a built-in game behavior)
while this map is active.
You can use this event to override the normal built-in behavior of the game
command.
- \c command (string): Name of the built-in game command that was pressed.
  Possible commands are
  \c "action", \c "attack", \c "pause", \c "item_1", \c "item_2",
  \c "right", \c "up", \c "left" and \c "down".
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (you are overriding the built-in behavior of pressing this game command).

\remark This event is not triggered if you already handled its underlying
  low-level keyboard or joypad event.

\subsection lua_api_map_on_command_released map:on_command_released(command)

Called when the player released a \ref lua_api_game_overview_commands
"game command"
(a keyboard key or a joypad action mapped to a built-in game behavior).
while this map is active.
You can use this event to override the normal built-in behavior of the game
command.
- \c command (string): Name of the built-in game command that was released.
  Possible commands are
  \c "action", \c "attack", \c "pause", \c "item_1", \c "item_2",
  \c "right", \c "up", \c "left" and \c "down".
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (you are overriding the built-in behavior of releasing this game command).

\remark This event is not triggered if you already handled its underlying
  low-level keyboard or joypad event.

\subsection lua_api_map_on_mouse_pressed map:on_mouse_pressed(button, x, y)

Called when the user presses a mouse button while this map is active.
- \c button (string): Name of the mouse button that was pressed.
  Possible values are \c "left", \c "middle", \c "right", \c "x1" and \c "x2".
- \c x (integer): The x position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c y (integer): The y position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_map_on_mouse_released map:on_mouse_released(button, x, y)

Called when the user releases a mouse button while this map is active.
- \c button (string): Name of the mouse button that was released.
  Possible values are \c "left", \c "middle", \c "right", \c "x1" and \c "x2".
- \c x (integer): The x position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c y (integer): The y position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\section lua_api_map_methods_deprecated Deprecated methods of the type map

The following methods are deprecated and may be removed it future releases.

\subsection lua_api_map_get_camera_position map:get_camera_position()

Returns the currently visible area of the map.

\warning This method is deprecated because since Solarus 1.5,
  the \ref lua_api_camera "camera" is now an entity.
  Therefore, you can get its coordinates and size like any other entity.

Use
\ref lua_api_entity_get_bounding_box "map:get_camera():get_bounding_box()"
instead.

\subsection lua_api_map_move_camera map:move_camera(x, y, speed, callback, [delay_before], [delay_after])

Starts a camera moving sequence.

\warning This method is deprecated because since Solarus 1.5,
  the \ref lua_api_camera "camera" is now an entity.
  Therefore, you can move the camera like any other entity and have much
  more customization possibilities.

It can be rewritten in pure Lua as follows.
\verbatim
function map:move_camera(x, y, speed, callback, delay_before, delay_after)

  local camera = map:get_camera()
  local game = map:get_game()
  local hero = map:get_hero()

  delay_before = delay_before or 1000
  delay_after = delay_after or 1000

  local back_x, back_y = camera:get_position_to_track(hero)
  game:set_suspended(true)
  camera:start_manual()

  local movement = sol.movement.create("target")
  movement:set_target(camera:get_position_to_track(x, y))
  movement:set_ignore_obstacles(true)
  movement:set_speed(speed)
  movement:start(camera, function()
    local timer_1 = sol.timer.start(map, delay_before, function()
      callback()
      local timer_2 = sol.timer.start(map, delay_after, function()
        local movement = sol.movement.create("target")
        movement:set_target(back_x, back_y)
        movement:set_ignore_obstacles(true)
        movement:set_speed(speed)
        movement:start(camera, function()
          game:set_suspended(false)
          camera:start_tracking(hero)
          if map.on_camera_back ~= nil then
            map:on_camera_back()
          end
        end)
      end)
      timer_2:set_suspended_with_map(false)
    end)
    timer_1:set_suspended_with_map(false)
  end)
end
\endverbatim

This function temporarily moves the camera somewhere else,
like to a place where a \ref lua_api_chest "chest" or an
\ref lua_api_enemy "enemy" will appear.

The camera first moves towards a target point.
When the target is reached, after a first delay,
your callback function is called.
Then, after a second delay, the camera moves back towards the hero.
The game is suspended during the whole sequence.
- \c x (number): X coordinate of the target, relative to the map's top-left
  corner.
- \c y (number): Y coordinate of the target, relative to the map's top-left
  corner.
- \c speed (number): Speed of the camera movement in pixels per second.
- \c callback (function): A function to be called when the camera reaches the
  target (after \c delay_before).
- \c delay_before (number, optional): A delay in milliseconds before calling
  your function once the target is reached (default \c 1000).
- \c delay_after (number, optional): A delay in milliseconds after calling
  your function, before the camera goes back (default \c 1000).

\section lua_api_map_events_deprecated Deprecated events of a map

The following events are deprecated and may be removed it future releases.

\subsection lua_api_map_on_camera_back map:on_camera_back()

After a camera sequence initiated by
\ref lua_api_map_move_camera "map:move_camera()",
this event is triggered when the camera gets back to the \ref lua_api_hero
"hero".

\warning This event is deprecated because since Solarus 1.5,
  \ref lua_api_map_move_camera "camera:move()" is deprecated.
  The \ref lua_api_camera "camera" is now an entity and now has
  much more customization possibilities.

Use \ref lua_api_camera_on_state_changed
"camera:on_state_changed()" instead,
or the callback parameter of
\ref lua_api_movement_start "movement:start()"

*/

