/**
\page lua_api_item Equipment items

\tableofcontents

An equipment item represents something that the player can obtain 
(one or more times, in various forms and with several variants) and possibly
keep.
The Lua item type described in this page provides various functions to
- get and the possession state of a equipment item,
- set its properties, like whether the item is saved and has an amount,
- control its dynamic behavior, like what happens when the player
  uses this item (for items that can be used).

A Lua item object represents a kind of treasure,
and not a particular instance of treasures.
Individual treasures may then be represented as
\ref lua_api_pickable "pickable treasures",
\ref lua_api_chest "chests",
\ref lua_api_shop_treasure "shop treasures", and may be brandished by the
\ref lua_api_hero "hero".
For example, multiple treasures of the kind \c "rupee" may exist at the same
time during the \ref lua_api_game "game", but only one Lua item
object manages them.

The script file <tt>items/XXXX.lua</tt> defines the item named \c XXXX.
The corresponding Lua item object is passed as parameter
of that script. Use the Lua notation \c "..." to get this parameter and store
it into a regular variable.

Here is a basic example of script for the \c rupee item,
an item whose only role is to increase the money of the player when he
obtains a rupee.
\verbatim
-- First, we put the parameter into a variable called "rupee".
-- (In Lua, the notation "..." refers to the parameter(s) of the script.)
local rupee = ...

-- Event called when the hero obtains a rupee treasure.
function rupee:on_obtaining()
  self:get_game():add_money(1)  -- Increase the money of 1 unit.
end
\endverbatim

\remark All item scripts are loaded when you create a \ref
lua_api_game "savegame" object. Indeed, equipment
items only exist in the context
of a particular savegame. As shown in the example above,
you can retrieve that savegame with
\ref lua_api_item_get_game "item:get_game()".

\remark A \ref quest_sprite_data_file "sprite" animation named
\c XXXX must also exist in
the sprite <tt>entities/items</tt>: it is used by the engine whenever it needs
to draw your item on the \ref lua_api_map "map"
(for example, when a \ref lua_api_pickable "pickable treasure"
of this kind is created on the map).

\section lua_api_item_methods Methods of the type item

\subsection lua_api_item_get_name item:get_name()

Returns the name of this item.
- Return value (string): The name that identifies this item. It is also the
  file name of the item script (without the extension).

\subsection lua_api_item_get_game item:get_game()

Returns the game where this item belongs.
- Return value (\ref lua_api_game "game"): The game that contains this item.

\remark Items only exist in the context of a game, but the game is not
  necessarily running.

\subsection lua_api_item_get_map item:get_map()

Returns the current map.
- Return value (\ref lua_api_map "map"): The current map, or \c nil if the
  \ref lua_api_game "game" is not running.

\subsection lua_api_item_get_savegame_variable item:get_savegame_variable()

Returns the name of the integer savegame value that stores the possession state
of this item.
- Return value (string): The savegame variable that stores the possessed
  variant of this item, or \c nil if this item is not saved.

\subsection lua_api_item_set_savegame_variable item:set_savegame_variable(savegame_variable)

Sets the name of the integer savegame value that stores the possession state
of this item.

You should call this function at initialization time if you want your item to
be saved.
- \c savegame_variable (string): The savegame variable that should stored the
  possessed variant of this item, or \c nil to make this item unsaved.

\subsection lua_api_item_get_amount_savegame_variable item:get_amount_savegame_variable()

Returns the name of the integer savegame value that stores the amount
associated to this item.
- Return value (string): The savegame variable that stores the possessed
  amount of this item, or \c nil if this item has no associated amount.

\subsection lua_api_item_set_amount_savegame_variable item:set_amount_savegame_variable()

Returns the name of the integer savegame value that stores the amount
of this item.

You should call this function at initialization time if you want your item to
store an amount (in addition to its possessed variant).
This is typically used for items like the bow and the counter of bombs.
- Return value (string): The savegame variable that should store the possessed
  amount of this item, or \c nil to make this item have no associated amount.

\subsection lua_api_item_is_being_used item:is_being_used()

Returns whether the item is currently being used somehow.

\subsection lua_api_item_is_obtainable item:is_obtainable()

Returns whether the player is allowed to obtain this item.

If not, any treasure representing this item is automatically replaced by
an empty treasure.
- Return value (boolean): \c true if this item is obtainable.

\subsection lua_api_item_set_obtainable item:set_obtainable([obtainable])

Sets whether the player is allowed to obtain this item.

If not, any treasure representing this item is automatically replaced by
an empty treasure. There is no risk that the player can obtain it or even see
it during the \ref lua_api_game "game".
You can use this feature to hide some items while the player
has not the necessary equipment. For example, you can make arrows
unobtainable until the player has the bow. You can also make magic jars
unobtainable until the player has a magic bar.
- Return value (boolean, optional): \c true if this item is obtainable (no value means
  \c true).

\subsection lua_api_item_is_assignable item:is_assignable()

Returns whether this item can be assigned to an item slot.

When the item is assigned to a slot, the player can use it by
pressing the \ref lua_api_game_overview_commands "game command" of that slot.
Some items are meant to be used by pressing a command (like the bow),
other are not supposed to (like a key or a rupee).
When the player uses your item, the event \ref lua_api_item_on_using
"item:on_using()" is triggered.
- Return value (boolean): \c true if this item is assignable.

\subsection lua_api_item_set_assignable item:set_assignable([assignable])

Sets whether this item should be assignable to an item slot.

When the item is assigned to a slot, the player can use it by
pressing the \ref lua_api_game_overview_commands "game command" of this slot.
Some items are meant to be used by pressing a command (like the bow),
other are not supposed to (like a key or a rupee).
When the player uses your item, the event \ref lua_api_item_on_using
"item:on_using()" is triggered.

By default, an item is not assignable. Call this function at initialization
time if you want your item to be assignable.
- \c assignable (boolean, optional): \c true if this item is assignable (no value means
  \c true).

\subsection lua_api_item_get_can_disappear item:get_can_disappear()

Returns whether \ref lua_api_pickable "pickable treasures" of this kind
disappears after a few seconds when they are dropped by an \ref lua_api_enemy
"enemy" or a \ref lua_api_destructible "destructible entity".
- Return value (boolean): \c true if pickable treasures of this kind can
  disappear.

\subsection lua_api_item_set_can_disappear item:set_can_disappear([can_disappear])

Sets whether \ref lua_api_pickable "pickable treasures" of this kind should
disappear after a few seconds when they are dropped by an \ref lua_api_enemy
"enemy" or a \ref lua_api_destructible "destructible entity".

By default, an item cannot disappear. Call this function at initialization
time if you want your item to be ephemeral.
- \c can_disappear (boolean, optional): \c true to make such pickable treasures
  disappear after a few seconds (no value means \c true).

\remark This property only applies to \ref lua_api_pickable
  "pickable treasures" dropped dynamically (by \ref lua_api_enemy "enemies"
  and \ref lua_api_destructible "destructible entities").
  Pickable treasures already present on the \ref lua_api_map "map" when the map
  starts don't disappear with time.

\subsection lua_api_item_get_brandish_when_picked item:get_brandish_when_picked()

Returns whether the hero brandishes treasures of this kind when he
\ref lua_api_pickable "picks" them
on the ground.
- Return value (boolean): \c true if the hero brandish such treasures.

\subsection lua_api_item_set_brandish_when_picked item:set_brandish_when_picked([brandish_when_picked])

Sets whether the hero should brandish treasures of this kind when he
\ref lua_api_pickable "picks" them on the ground.

Treasures coming from a \ref lua_api_chest "chest" are always brandished, even
the most basic ones like simple rupees.
However, when treasures are \ref lua_api_pickable "picked" on the ground
(like rupees dropped by an \ref lua_api_enemy "enemy"),
you may want the hero not to brandish them.

By default, this property is \c true. Call this function
if you don't want your item to be brandished when it is picked on the
ground.
- \c brandish_when_picked (boolean, optional): \c true if the hero should
  brandish such treasures (no value means \c true).

\subsection lua_api_item_get_shadow item:get_shadow()

Returns the name of the animation representing the shadow of this item
in the sprite \c "entities/shadow".
- Return value (string): Name of the shadow animation adapted to this item
  in the sprite \c "entities/shadow". \c nil means no shadow displayed.

\subsection lua_api_item_set_shadow item:set_shadow(shadow_animation)

Sets the name of the animation that should represent the shadow of this item
in the sprite \c "entities/shadow".

When the engine needs to show a treasure representing your item, it sometimes
also wants to display a shadow (in addition of the treasure's main sprite).
For example, \ref lua_api_pickable "pickable treasures"
dropped by enemies normally have a shadow.

The default shadow animation is \c "big". You should call this function at
initialization time if your item sprite is larger or smaller than usual.
- \c shadow_animation (string): Name of the shadow animation in the sprite
  \c "entities/shadow" to set for this item. \c nil means that no shadow
  will be displayed.

\remark To draw a treasure, the engine relies on two sprites: the treasure's
  main sprite (\c entities/item) and the shadow's sprite (\c entities/shadow).
  Both sprites and their appropriate animations must exist so
  that treasures can be displayed correctly.

\subsection lua_api_item_get_sound_when_picked item:get_sound_when_picked()

Returns the sound played when the hero
\ref lua_api_pickable "picks a treasure" of this kind.
- Return value (string): Name of the sound played when the hero picks a
  treasure of this kind (\c nil means no sound).

\subsection lua_api_item_set_sound_when_picked item:set_sound_when_picked(sound_when_picked)

Sets the sound to play when the hero
\ref lua_api_pickable "picks a treasure" of this kind.

The default sound is \c "picked_item".
- \c sound_when_picked (string): Name of the sound to play
  (as in \ref lua_api_audio_play_sound "sol.audio.play_sound()")
  when the hero picks a treasure of this kind (\c nil means no sound).

\remark This sound is always played, even if the treasure
  is also brandished then (i.e. if \ref lua_api_item_get_brandish_when_picked
  "item:get_brandish_when_picked()" returns \c true).

\subsection lua_api_item_get_sound_when_brandished item:get_sound_when_brandished()

Returns the sound played when the hero brandishes a treasure of this kind.
- Return value (string): Name of the sound played when the hero brandishes a
  treasure of this kind (\c nil means no sound).

\subsection lua_api_item_set_sound_when_brandished item:set_sound_when_brandished(sound_when_brandished)

Sets the sound to play when the hero
brandishes a treasure of this kind.

The hero can brandish treasures in various situations: when opening a
\ref lua_api_chest "chest", when buying a
\ref lua_api_shop_treasure "shop treasure",
when picking up a \ref lua_api_pickable "pickable treasure" (unless  
you called \ref lua_api_item_set_brandish_when_picked
"item:set_brandish_when_picked(false)"), and also when you call
\ref lua_api_hero_start_treasure "hero:start_treasure()" directly.

The default sound is \c "treasure".
- \c sound_when_brandished (string): Name of the sound to play
  (as in \ref lua_api_audio_play_sound "sol.audio.play_sound()")
  when the hero brandishes a treasure of this kind (\c nil means no sound).

\subsection lua_api_item_has_variant item:has_variant([variant])

Returns whether the player owns at least the specified variant of this item
(only for a saved item).
- \c variant (number, optional): The variant to check (default \c 1).
- Return value (boolean): \c true if the player has at least this variant.

\remark Equivalent to <tt>item:get_variant() >= variant</tt>.

\subsection lua_api_item_get_variant item:get_variant()

Returns the possession state of this item (only for a saved item).
- Return value (number): The possession state (\c 0: not possessed,
  \c 1: first variant, \c 2: second variant, etc.).

\remark Equivalent to
<tt>item:get_game():get_value(item:get_savegame_variable())</tt>.

\subsection lua_api_item_set_variant item:set_variant(variant)

Sets the possession state of this item (only for a saved item).
- \c variant (number): The new possession state to set (\c 0: not possessed,
  \c 1: first variant, \c 2: second variant, etc.)

\remark Equivalent to
<tt>item:get_game():set_value(item:get_savegame_variable(), variant)</tt>.

\subsection lua_api_item_has_amount item:has_amount([amount])

Returns whether this item has an associated amount,
or whether the player has at least the specified value.
- \c amount (number, optional): The amount to check. If this parameter is not
  set, this function only tests whether an amount value exists for the item.
- Return value (boolean): If an amount is specified, return \c true if the
  player has at least that amount. Otherwise, returns \c true if the item has
  an amount value.

\remark If an amount is specified, this method is equivalent to
  <tt>item:get_amount() >= amount</tt>. Otherwise, this method is equivalent
  to <tt>item:get_amount_savegame_variable() ~= nil</tt>.

\subsection lua_api_item_get_amount item:get_amount()

Returns the amount associated to this item (only for an item with an amount
value).
- Return value (number): The associated amount.

\remark Equivalent to
<tt>item:get_game():get_value(item:get_amount_savegame_variable())</tt>.

\subsection lua_api_item_set_amount item:set_amount(amount)

Sets the amount associated to this item (only for an item with an amount
value).
A negative amount will be replaced by \c 0.
An amount greater than \ref lua_api_item_get_max_amount
"item:get_max_amount()" will be replaced by that maximum value.
- \c amount (number): The amount to set.

\subsection lua_api_item_add_amount item:add_amount(amount)

Increases the amount associated to this item (only for an item with an amount
value), without exceeding the maximum amount.
- \c amount (number): The amount to add.

\subsection lua_api_item_remove_amount item:remove_amount(amount)

Decreases the amount associated to this item (only for an item with an amount
value), without going below \c 0.
- \c amount (number): The amount to remove.

\subsection lua_api_item_get_max_amount item:get_max_amount()

Returns the maximum amount associated to this item
(only for an item with an amount value).
- Return value (number): The maximum amount.

\subsection lua_api_item_set_max_amount item:set_max_amount(max_amount)

Sets the maximum amount associated to this item
(only for an item with an amount value).
This maximum value is used in \ref lua_api_item_set_amount
"item:set_amount()" and \ref lua_api_item_add_amount
"item:add_amount()" to make a limit.
The default value is \c 1000.
- \c max_amount (number): The maximum amount to set.

\remark The maximum amount of an item is not saved automatically.
  Only the current variant (see \ref lua_api_item_set_savegame_variable
  "item:set_savegame_variable()") and the current amount (see \ref
  lua_api_item_set_amount_savegame_variable
  "item:set_amount_savegame_variable()") are saved by the engine.
  Therefore, you have to set the maximum amount of appropriate items when
  they are loaded (typically from event \ref lua_api_item_on_started
  "item:on_started()").

\subsection lua_api_item_set_finished item:set_finished()

Notifies the engine that using this item is finished and that the hero can
get back to a normal state.

When the player uses this item (by pressing an item
\ref lua_api_game_overview_commands
"game command"), your item script takes full control of the
\ref lua_api_hero "hero" (event
\ref lua_api_item_on_using "item:on_using()" is called) and you have to
program the item's behavior. When it is finished, call this function
to restore normal control to the player.

This method should only be called when the hero is using this item.

\section lua_api_item_events Events of an item

Events are callback methods automatically called by the engine if you define
them.
In the case of a game, they are only called on the game currently running, if
any.

\subsection lua_api_item_on_created item:on_created()

Called when your item script is being created, that is, when the
\ref lua_api_game "game" object is being created.

In this event, you should initialize your item.

\remark All items scripts are not loaded yet at this time.
  Your item is being loaded, but you don't know the status of the other ones.
  Unless your item is the last one to be
  initialized, other items are not ready. If your item needs to get
  some properties from other items in its initialization, use \ref
  lua_api_item_on_started "item:on_started()" instead.

\subsection lua_api_item_on_started item:on_started()

Called when your item starts, that is, once all items are created.

At this time, all items scripts are loaded and their
\ref lua_api_item_on_created "on_created()" events have been called.

You can use this event to make initializations that depend on other items.
Such initializations could not be done earlier
from \ref lua_api_item_on_created "item:on_created()", because all items
did not exist at that time.

\subsection lua_api_item_on_finished item:on_finished()

Called when the \ref lua_api_game "game" stops running.

\subsection lua_api_item_on_update item:on_update()

Called at each cycle of the main loop while the
\ref lua_api_game "game" is running.

\remark As this function is called at each cycle, it is recommended to use other
solutions when possible, like \ref lua_api_timer "timers" and other events.

\subsection lua_api_item_on_suspended item:on_suspended(suspended)

Called when the \ref lua_api_map "map" is being suspended or resumed.
Only possible when the \ref lua_api_game "game" is running.

The map is suspended by the engine in a few cases, like when the game is
paused or when the camera is being moved by a script.
When this happens, all \ref lua_api_entity "map entities" stop moving and most
\ref lua_api_sprite "sprites" stop their animation.
Your item may need to be notified.
- \c suspended (boolean): \c true if the map is being suspended, \c false if
  it is being resumed.

\subsection lua_api_item_on_map_changed item:on_map_changed(map)

Called when the player has just entered a \ref lua_api_map "map".
Only possible when the \ref lua_api_game "game" is running.

The new map is already started at this point.
- \c map (\ref lua_api_map "map"): The new active map.

\remark This event is also called for the first map (when your \ref
lua_api_game "game" starts).

\subsection lua_api_item_on_pickable_created item:on_pickable_created(pickable)

Called when a \ref lua_api_pickable "pickable treasure" of your item's
kind is created on the \ref lua_api_map "map".
Only possible when the \ref lua_api_game "game" is running.

If you need to do something special when a pickable treasure of this kind
appears on the \ref lua_api_map "map", like setting a particular
\ref lua_api_movement "movement", you can use this event.
- \c pickable (\ref lua_api_pickable "pickable treasure"): The pickable
  treasure just created.

\subsection lua_api_item_on_obtaining item:on_obtaining(variant, savegame_variable)

Called when the hero is obtaining a treasure of this kind of item.
Only possible when the \ref lua_api_game "game" is running.
- \c variant (number): The variant of item (because some items may have several
  variants). \c 1 is the first variant, \c 2 is the second variant, etc.
- \c savegame_variable (string): Name of the boolean saved value that stores
  the state of the treasure being obtained.
  \c nil means that the treasure is not saved.

\remark If the treasure is brandished, this function is called immediately
  (before the dialog starts). If you want to do something after the treasure's
  dialog, see \ref lua_api_item_on_obtained "item:on_obtained()".

\subsection lua_api_item_on_obtained item:on_obtained(variant, savegame_variable).

Like \ref lua_api_item_on_obtaining "item:on_obtaining()",
but called right after the treasure is obtained.
Only possible when the \ref lua_api_game "game" is running.

In the case of a brandished treasure, this event is called once the
treasure's dialog is finished.
Otherwise, it is called immediately after
\ref lua_api_item_on_obtaining "item:on_obtaining()".
- \c variant (number): The variant of item (because some items may have several
  variants). \c 1 is the first variant, \c 2 is the second variant, etc.
- \c savegame_variable (string): Name of the boolean saved value that stores
  the state of the treasure just obtained.
  \c nil means that the treasure is not saved.

\subsection lua_api_item_on_variant_changed item:on_variant_changed(variant)

Called when the possessed variant of this item has just changed.
Only for saved items.

This event is triggered whenever the variant changes: it can be when the hero
obtains a treasure of this item's kind, or when you call
\ref lua_api_item_set_variant "item:set_variant()" explicitly.
- \c variant (number): The new variant possessed (possibly \c 0).

\subsection lua_api_item_on_amount_changed item:on_amount_changed(amount)

Called when the possessed amount of this item has just changed.
Only for items with an associated amount.

This event is triggered when you call
\ref lua_api_item_set_amount "item:set_amount()",
\ref lua_api_item_add_amount "item:add_amount()",
\ref lua_api_item_remove_amount "item:remove_amount()",
- \c amount (number): The new amount possessed (possibly \c 0).

\subsection lua_api_item_on_using item:on_using()

Called when the player is using this item.
Only possible when the \ref lua_api_game "game" is running,
and only for \ref lua_api_item_set_assignable "assignable items".

The player is using your item (by pressing an item
\ref lua_api_game_overview_commands
"game command"). You now have full control of the \ref lua_api_hero "hero".
From this event, you have to program the item's behavior.
For example, your item can remove some magic points and perform an special
attack that kills all enemies nearby.
When you have finished, call \ref lua_api_item_set_finished
"item:set_finished()" to restore normal control to the player.

\remark There is another event for the special case of giving an item
  to an \ref lua_api_npc "non-playing character".
  If the \ref lua_api_hero "hero" uses an item in front of an
  \ref lua_api_npc "NPC" whose property is to notify your item,
  then event \ref lua_api_item_on_npc_interaction_item
  "item:on_npc_interaction_item()" is triggered first. If that event is
  defined and returns \c true, then \ref lua_api_item_on_using
  "item:on_using()" is not called (the interaction is considered
  done).

\subsection lua_api_item_on_ability_used item:on_ability_used(ability_name)

Called when the player has just performed a built-in ability.
Only possible when the \ref lua_api_game "game" is running.

Built-in abilities indicate whether the hero can perform some built-in
actions like attacking, swimming or running.
See \ref lua_api_game_get_ability "game:get_ability()" for more details.
- \c ability_name (string): Name of the ability that was used.

\subsection lua_api_item_on_npc_interaction item:on_npc_interaction(npc)

Called when the \ref lua_api_hero "hero" interacts
(the player pressed the \ref lua_api_game_overview_commands "action command")
in front of an
\ref lua_api_npc "NPC" whose property is to notify your item.
Only possible when the \ref lua_api_game "game" is running.
- \c npc (\ref lua_api_npc "NPC"): A non-playing character.

\subsection lua_api_item_on_npc_interaction_item item:on_npc_interaction_item(npc, item_used)

Called when the \ref lua_api_hero "hero" uses any item
(the player pressed an \ref lua_api_game_overview_commands "item command") with an
\ref lua_api_npc "NPC" whose property is to notify your item.
Only possible when the \ref lua_api_game "game" is running.
- \c npc (\ref lua_api_npc "NPC"): A non-playing character.
- \c item_used (item): The item currently used by the player.
  This is not necessarily your item. The reason why your item gets notified
  is because the NPC is related to your item. But the player may be using
  another item.
- Return value (boolean): \c true if an interaction happened. If you return
  \c false or nothing, then \ref lua_api_item_on_using
  "item_used:on_using()" will be called
  (just like if there was no %NPC in front of the hero).

\subsection lua_api_item_on_npc_collision_fire item:on_npc_collision_fire(npc)

Called when an \ref lua_api_npc "NPC" whose property is to notify your item
touches \ref lua_api_fire "fire".
Only possible when the \ref lua_api_game "game" is running.
- \c npc (\ref lua_api_npc "npc"): A non-playing character that touches fire
  and has the property to notify your item.

*/

