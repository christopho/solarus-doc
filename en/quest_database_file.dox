/**
\page quest_database_file Quest database file

\tableofcontents

The \c project_db.dat file declares all resources
(maps, musics, sprites, items, enemies, fonts, etc.) of your quest
and contains other additional information about files.
Each resource has an id and a description,
and usually corresponds to one or several files.

The engine needs this database file to preload or initialize some resources
when the program starts.
The quest editor needs this file to provide graphical components that let the
user choose a resource in a list of user-friendly names.

\section quest_database_file_syntax Syntax of the database file

Solarus Quest Editor fully supports the edition of the quest database file
\c project_db.dat.
You should not have to edit this file by hand unless you know what you
are doing.

We give here the syntax of \c project_db.dat.

\c project_db.dat is a text file encoded in UTF-8.
The sequence of characters \c \-\- (two dashes) marks
the beginning of a comment.
After them, the rest of the line is ignored.
Empty lines are also ignored.

\subsection quest_database_file_resources Resources

There are 9 types of resources:
- \c map,
- \c tileset,
- \c sound,
- \c music,
- \c sprite,
- \c item,
- \c enemy,
- \c language
- \c shader.
This file declares the list of all resources, with their id and their
user-friendly description.
The id of a resource element determines the name of the file(s)
where this element is stored: for example,
an enemy with id \c "soldier" will be defined in the script file
\c "enemies/soldier.lua".
See the documentation of each resource type for more details.

The definition of each resource element starts with the name of a resource type
(from the list above),
followed by an opening brace, and ends with a closing brace.
Inside the braces, the properties of the resource are specified.
Properties are declared with the syntax <tt>key = value</tt> and
separated with commas. It is allowed to have an extra comma after
the last property. String values are enclosed within double quotes.
Each resource element must have the following two properties:
- \c id (string): Id of the element. It should not contain spaces.
  The id determines the data file(s) of this element.
  - For a map: the id is the name of the
    \ref quest_map_data_file "map data file" without its extension,
    relative to the \c maps directory.
    Note that the first map declared in this file will be the default map.
  - For a tileset: the id is the name of the
    \ref quest_tileset_data_file "tileset data file" without its extension,
    relative to the \c tilesets directory.
  - For a sound: the id is the sound file name without its extension,
    relative to the \c sounds directory.
  - For a music: the id is the music file name without its extension,
    relative to the \c musics directory.
  - For a sprite: the id is the name of the
    \ref quest_sprite_data_file "sprite data file",
    relative to the \c sprites directory.
    The sprite data file may be in a hierarchy of subdirectories.
    Subdirectories must be separated by a slash "/" character in the sprite
    id.
  - For an equipment item: the id is the name of the item's Lua script
    without its extension, relative to the \c items directory.
  - For an enemy model: the id is the is name of the enemy's Lua script
    without its extension, relative to the \c enemies directory.
  - For a language: the id is the name of a subdirectory of the \c languages
    directory.
  - For a font: the id is the font file name without its extension,
    relative to the \c fonts directory.
  - For a shader: the id is the shader data file without its extension,
    relative to the \c shaders directory.
- \c description (string): A human-readable name that describes this element.
  It may contain spaces. It is useful to show to users something more
  user-friendly than the id.

\subsection quest_database_file_files Files information

TODO

\subsection quest_database_file_example Example

Here is an example of a valid quest database file:

\verbatim
map{      id = "outside",      description = "Outside World" }
map{      id = "hero_house",   description = "House of the hero" }
map{      id = "shop",         description = "Shop" }
map{      id = "dungeon_1_1f", description = "Dungeon 1 - First floor" }
map{      id = "dungeon_1_2f", description = "Dungeon 1 - Second floor" }

tileset{  id = "overworld",    description = "Overworld" }
tileset{  id = "house",        description = "House" }
tileset{  id = "dungeon",      description = "Dungeon" }

sound{    id = "door_closed",  description = "Door closing" }
sound{    id = "door_open",    description = "Door opening" }
sound{    id = "enemy_hurt",   description = "Enemy hurt" }
sound{    id = "jump",         description = "Jumping" }
sound{    id = "treasure",     description = "Treasure" }

item{     id = "sword",        description = "Sword" }
item{     id = "bow",          description = "Bow" }
item{     id = "arrow",        description = "Arrows (x1 / x5 / x10)" }

enemy{    id = "soldier",      description = "Soldier" }
enemy{    id = "dragon",       description = "Dragon" }

language{ id = "en",           description = "English" }

font{     id = "8_bit",        description = "8 bit font" }

file{     path = "sprites/enemies/soldier.png", author = "John", license = "CC BY-SA 4.0" }

\endverbatim

In the quest editor, you can add, remove and change the id and the description
of resources from the quest tree.
Therefore, you probably don't need to edit this file by hand.

\remark The syntax of this resource list file is actually valid Lua.
  The engine internally uses Lua to parse it.

*/

