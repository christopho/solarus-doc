/**
\page lua_api_drawable Drawable objects

\tableofcontents

%Drawable objects are things that can be drawn on a destination surface.
They include the following types:
\subpage lua_api_surface "surface",
\subpage lua_api_text_surface "text surface" and
\subpage lua_api_sprite "sprite".
This page describes the methods common to those types.

\section lua_api_drawable_methods Methods of all drawable types

These methods exist in all drawable types.

\subsection lua_api_drawable_draw drawable:draw(dst_surface, [x, y])

Draws this object on a destination surface.
- \c dst_surface (\ref lua_api_surface "surface"): The destination surface.
- \c x (number, optional): X coordinate of where to draw this object
  (default \c 0).
- \c y (number, optional): Y coordinate of where to draw this object.
  (default \c 0).

\subsection lua_api_drawable_draw_region drawable:draw_region(region_x, region_y, region_width, region_height, dst_surface, [x, y])

Draws a subrectangle of this object on a destination surface.
- \c region_x (number): X coordinate of the subrectangle to draw.
- \c region_y (number): Y coordinate of the subrectangle to draw.
- \c region_width (number): Width of the subrectangle to draw.
- \c region_height (number): Height of the subrectangle to draw.
- \c dst_surface (\ref lua_api_surface "surface"): The destination surface.
- \c x (number, optional): X coordinate of where to draw this rectangle
  on the destination surface (default \c 0).
- \c y (number, optional): Y coordinate of where to draw this rectangle.
  on the destination surface (default \c 0).

\subsection lua_api_drawable_get_blend_mode drawable:get_blend_mode()

Returns the blend mode of this drawable object.

The blend mode defines how this drawable object will be drawn on other surfaces
when you call
\ref lua_api_drawable_draw "drawable:draw()" or
\ref lua_api_drawable_draw_region "drawable:draw_region()".
- Return value (string): The blend mode.
  See \ref lua_api_drawable_set_blend_mode "drawable:set_blend_mode()"
  for the possible values.

\subsection lua_api_drawable_set_blend_mode drawable:set_blend_mode(blend_mode)

Sets the blend mode of this drawable object.

The blend mode defines how this drawable object will be drawn on other surfaces
when you call
\ref lua_api_drawable_draw "drawable:draw()" or
\ref lua_api_drawable_draw_region "drawable:draw_region()".
- \c blend_mode (string): The blend mode. Can be one of:
  - \c "none": No blending. The destination surface is replaced by the pixels
    of this drawable object.<br>
    <tt>dstRGBA = srcRGBA</tt>
  - \c "blend" (default): This drawable object is alpha-blended onto
    the destination surface.<br>
    <tt>dstRGB = (srcRGB * srcA) + (dstRGB * (1 - srcA))</tt><br>
    <tt>dstA = srcA + (dstA * (1 - srcA))</tt>
  - \c "add": This drawable object is drawn onto the destination
    surface with additive blending.
    The clarity of the destination surface is kept.
    Useful to color and lighten the destination surface.<br>
    <tt>dstRGB = (srcRGB * srcA) + dstRGB</tt>
  - \c "multiply": Color modulation.
    Can be used to darken the destination surface
    without degrading its content.<br>
    <tt>dstRGB = srcRGB * dstRGB</tt>


\subsection lua_api_drawable_get_opacity drawable:get_opacity()

Returns the opacity of this drawable.
- Return value (integer): The opacity: \c 0 (transparent) to \c 255 (opaque).

\subsection lua_api_drawable_set_opacity drawable:set_opacity(opacity)

Sets the opacity of this drawable.

All drawables are initially opaque.
- \c opacity (integer): The opacity: \c 0 (transparent) to \c 255 (opaque).


\subsection lua_api_drawable_get_shader drawable:get_shader()

Get the shader applied to this object.

- Return value (\ref lua_api_shader "shader"): The shader, nil if none is set.

\subsection lua_api_drawable_set_shader drawable:set_shader([shader])

Set the shader used to draw this entity. Default drawing is done with no shader (nil).
- \c shader(\ref lua_api_shader "shader"): An optional shader, passing no shader will reset drawing to normal.

\subsection lua_api_drawable_fade_in drawable:fade_in([delay], [callback])

Starts a fade-in effect on this object.

You can specify a callback function to be executed when the fade-in effect
finishes.

If the drawable object is a
\ref lua_api_sprite "sprite" attached to a \ref lua_api_entity "map entity"
during a game, the fade-in effect gets the lifetime of that entity.
The behavior is probably what you expect:
the fade-in effect gets suspended when the entity gets suspended,
and it gets canceled (that is, the callback is never executed)
when the map entity is destroyed.
- \c delay (number, optional): Delay in milliseconds between two
  frames of the fade-in animation (default \c 20).
- \c callback (function, optional): A function to call when the
  fade-in effect finishes.

\note When your drawable object does not belong to a
  \ref lua_api_entity "map entity" (typically in a title screen
  before a game is started, or in your pause menu),
  the fade-in effect continues until the drawable object is
  garbage-collected.
  In other words, the callback can be executed even if you have stopped
  using the drawable object in the meantime.
  Therefore, you should use the \c callback parameter with care.
  In these situations, using a \ref lua_api_timer "timer" for your callback
  is easier because timers have an explicit lifetime.

\subsection lua_api_drawable_fade_out drawable:fade_out([delay], [callback])

Starts a fade-out effect on this object.

You can specify a callback function to be executed when the fade-out effect
finishes.

If the drawable object is a
\ref lua_api_sprite "sprite" attached to a \ref lua_api_entity "map entity"
during a game, the fade-out effect gets the lifetime of that entity.
The behavior is probably what you expect:
the fade-out effect gets suspended when the entity gets suspended,
and it gets canceled (that is, the callback is never executed)
when the map entity is destroyed.
- \c delay (number, optional): Delay in milliseconds between two
  frames of the fade-out animation (default \c 20).
- \c callback (function, optional): A function to call when the
  fade-out effect finishes.

\note When your drawable object does not belong to a
  \ref lua_api_entity "map entity" (typically in a title screen
  before a game is started, or in your pause menu),
  the fade-out effect continues until the drawable object is
  garbage-collected.
  In other words, the callback can be executed even if you have stopped
  using the drawable object in the meantime.
  Therefore, you should use the \c callback parameter with care.
  In these situations, using a \ref lua_api_timer "timer" for your callback
  is easier because timers have an explicit lifetime.

\subsection lua_api_drawable_get_xy drawable:get_xy()

Returns the offset added where this drawable object is drawn.

This value is initially <tt>0,0</tt>.
It is added to whatever coordinates the object is drawn at.

They can be modified by a \ref lua_api_movement "movement"
or by \ref lua_api_drawable_set_xy "drawable:set_xy()".
- Return value 1 (number): X offset of the drawable object.
- Return value 2 (number): Y offset of the drawable object.

\subsection lua_api_drawable_set_xy drawable:set_xy(x, y)

Sets the offset added where this drawable object is drawn.

This value is initially <tt>0,0</tt>.
It is added to whatever coordinates the object is drawn at.

- \c x (number): X offset to set.
- \c y (number): Y offset to set.

\subsection lua_api_drawable_get_movement drawable:get_movement()

Returns the current movement of this drawable object.
- Return value (\ref lua_api_movement "movement"): The current movement,
  or \c nil if the drawable object is not moving.

\subsection lua_api_drawable_stop_movement drawable:stop_movement()

Stops the current movement of this drawable object if any.

*/

