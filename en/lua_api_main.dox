/**
\page lua_api_main General features

\tableofcontents

\c sol.main contains general features and utility functions
that are global to the execution
of the program, no matter if a game or some menus are running.

\section lua_api_main_functions Functions of sol.main

\subsection lua_api_main_get_solarus_version sol.main.get_solarus_version()

Returns the current Solarus version.

The Solarus version includes three numbers: x.y.z,
where x is the major version,
y is the minor version
and z is the patch version.

Changes of major and minor versions may introduce some incompatibilities
in the Lua API.
Patch versions are only for bug fixing and never introduce incompatibilities.
See the
<a href="http://wiki.solarus-games.org/doku.php?id=migration_guide">migration
guide</a> for instructions about how to upgrade your quest to the latest
version.

- Return value (string): The Solarus version.

\subsection lua_api_main_api_get_quest_version sol.main.get_quest_version()

Returns the version of the currently running quest as specified in the
\ref quest_properties_file "Quest Properties file".

- Return value (string): The quest version, or \c nil if no quest version
  was set the quest properties.

\subsection lua_api_main_get_quest_format sol.main.get_quest_format()

Returns the Solarus compatibility format of this quest.

This corresponds to a version of Solarus
with major and minor version numbers (no patch number),
for example \c "1.5".

- Return value (string): The format of this quest.

\subsection lua_api_main_load_file sol.main.load_file(script_name)

Loads a Lua file (but does not run it).

This function is a replacement to the usual Lua function \c loadfile().
The difference is that it looks for a file in the quest tree
(which may be a directory or an archive) and also in the
\ref lua_api_main_set_quest_write_dir "quest write directory".
The quest write directory is tried first.

- \c script_name (string): Name of the Lua file to load
  (with or without extension),
  relative to the data directory or the write directory of your quest.
- Return value (function): A function representing the chunk loaded,
  or \c nil if the file does not exist or could not be loaded as Lua.

\remark Keep in mind that Lua files, as all data files of your quest,
  may be located inside an archive instead of being regular files.
  Therefore, to run them, you cannot use usual Lua functions like
  \c loadfile() or \c dofile().
  Use \ref lua_api_main_load_file "sol.main.load_file()"
  and \ref lua_api_main_do_file "sol.main.do_file()"
  instead to let Solarus determine how to locate and open the file.

\remark Note however that \c require() can be used normally because it is
  a higher-level function.
  Indeed, a specific loader is automatically set by the engine
  so that \c require() looks in the archive if necessary
  and in the quest write directory.
  \c require() is the recommended way to load code from another file, because
  unlike
  \ref lua_api_main_load_file "sol.main.load_file()" and
  \ref lua_api_main_do_file "sol.main.do_file()",
  it does not parses the file again every time you call it.

\subsection lua_api_main_do_file sol.main.do_file(script_name)

Loads and runs a Lua file into the current context.

This function is a replacement to the usual Lua function \c dofile().
The difference is that it looks for a file in the quest tree
(which may be a directory or an archive) and also in the
\ref lua_api_main_set_quest_write_dir "quest write directory".
The quest write directory is tried first.
The file must exist.

Use \ref lua_api_main_load_file "sol.main.load_file()"
explicitly if you need to check the existence
of the file or to use parameters and return values.
- \c script_name (string): Name of the Lua file to load
  (with or without extension),
  relative to the data directory or the write directory of your quest.

\remark This function is equivalent to <tt>sol.main.load_file(script_name)()</tt>.

\remark \c require() is the recommended way to load code from another file, because
  unlike
  \ref lua_api_main_load_file "sol.main.load_file()" and
  \ref lua_api_main_do_file "sol.main.do_file()",
  it does not parses the file again every time you call it.

\subsection lua_api_main_reset sol.main.reset()

Resets the whole program after the current cycle.
Lua will be entirely shut down and then initialized again.

\subsection lua_api_main_exit sol.main.exit()

Exits the program after the current cycle.

\subsection lua_api_main_get_elapsed_time sol.main.get_elapsed_time()

Returns the simulated time elapsed since Solarus was started.

This corresponds to real time, unless the system is too slow to play at
normal speed.
- Return value (number): The number of simulated milliseconds elapsed since
  the beginning of the program.

\remark This time is not reset when you call
  \ref lua_api_main_reset "sol.main.reset()".

\subsection lua_api_main_get_quest_write_dir sol.main.get_quest_write_dir()

Returns the subdirectory where files specific to the quest are saved,
like savegames and settings.
The quest write directory is specified in your
\ref quest_properties_file "quest.dat"
file and may be changed dynamically with
\ref lua_api_main_get_quest_write_dir "sol.main.set_quest_write_dir()".

- Return value (string): The quest write directory, relative to the Solarus
  write directory, or \c nil if it was not set.

\subsection lua_api_main_set_quest_write_dir sol.main.set_quest_write_dir(quest_write_dir)

Changes the subdirectory where files specific to the quest are saved,
like savegames and settings.
Note that the quest write directory can already be specified in your
\ref quest_properties_file "quest.dat"
file.
You usually don't have to call this function, unless you need to change it
dynamically for some reason.

- \c quest_write_dir (string): The quest write directory, relative to the Solarus
  write directory, or \c nil to unset it.

\subsection lua_api_main_load_settings sol.main.load_settings([file_name])

Loads and applies the built-in settings from a file previously saved with
\ref lua_api_main_save_settings "sol.main.save_settings()".
Settings from the file include user preferences such as the language
and the audio volume.

Note that all these settings can already be modified individually with the Lua
API, so you can either use this function or implement something more fitted
to your needs.

A valid quest write directory must be set (in your
\ref quest_properties_file "quest.dat" file
or by calling
\ref lua_api_main_set_quest_write_dir "sol.main.set_quest_write_dir()"),
otherwise this function generates a Lua error.
- \c file_name (string, optional): Settings file to read, relative to the
  quest write directory. The default file name is \c settings.dat.
- Return value (boolean): \c true if settings were successfully loaded and
  applied.

\remark When you launch a quest from the Solarus GUI,
  user preferences that are currently set in the menus of the GUI are
  automatically written to \c settings.dat before the quest starts and are
  automatically applied as soon as the quest starts.

\subsection lua_api_main_save_settings sol.main.save_settings([file_name])

Saves the current built-in settings into a file.
This file can be reloaded later with \ref lua_api_main_load_settings
"sol.main.load_settings()" to
restore the saved settings.
Settings saved include user preferences such as the current language,
and the current audio volume.

Note that all these settings can already be modified individually with the Lua
API, so you can either use this function or implement something more fitted
to your needs.

A valid quest write directory must be set (in your
\ref quest_properties_file "quest.dat" file
or by calling
\ref lua_api_main_set_quest_write_dir "sol.main.set_quest_write_dir()"),
otherwise this function generates a Lua error.
- \c file_name (string, optional): %Settings file to read, relative to the
  quest write directory. The default file name is \c settings.dat.
- Return value (boolean): \c true if settings were successfully saved.

\remark When you launch a quest from the Solarus GUI,
  user preferences that are currently set in the menus of the GUI are
  automatically written to \c settings.dat before the quest starts and are
  automatically applied as soon as the quest starts.

\subsection lua_api_main_get_distance sol.main.get_distance(x1, y1, x2, y2)

Utility function that computes the distance in pixels between two points.
- \c x1 (number): X coordinate of the first point.
- \c y1 (number): Y coordinate of the first point.
- \c x2 (number): X coordinate of the second point.
- \c y2 (number): Y coordinate of the second point.
- Return value (number): The distance in pixels.

\subsection lua_api_main_get_angle sol.main.get_angle(x1, y1, x2, y2)

Utility function that computes the angle in radians between the X axis and the
specified vector.
- \c x1 (number): X coordinate of the first point.
- \c y1 (number): Y coordinate of the first point.
- \c x2 (number): X coordinate of the second point.
- \c y2 (number): Y coordinate of the second point.
- Return value (number): The angle in radians between the x axis and this
  vector.

\subsection lua_api_main_get_resource_ids sol.main.get_resource_ids(resource_type)

Returns an array of all resource elements IDs of the given type in the quest.
- \c resource_type (string): Name of the resource type to list elements from.
  Can be one of:
  - \c "enemy",
  - \c "entity",
  - \c "font",
  - \c "item",
  - \c "language",
  - \c "map",
  - \c "music",
  - \c "shader",
  - \c "sound",
  - \c "sprite",
  - \c "tileset".
- Return value (table): An array of all elements of this resource type declared
  in the quest.
  This is a standard Lua array (the first index is 1),
  and values are all strings.

\subsection lua_api_main_get_type sol.main.get_type(value)

Returns the type name of a value.

This function is similar to the standard Lua function type(), except that
for userdata known by Solarus, it returns the exact Solarus type name.

- \c value (any type): Any value or \c nil.
- Return value (string): The name of the type.
  Can of one of standard Lua type names: \c "nil" (a string, not the value nil),
  \c "number", \c "string", \c "boolean", \c "table", \c "function", \c "thread".
  If it is a userdata unknown to Solarus, returns \c "userdata".
  If it is a Solarus userdata, returns one of:
  \c "game",
  \c "map",
  \c "item",
  \c "surface",
  \c "text_surface",
  \c "sprite",
  \c "shader",
  \c "timer",
  \c "movement",
  \c "straight_movement",
  \c "target_movement",
  \c "random_movement",
  \c "path_movement",
  \c "random_path_movement",
  \c "path_finding_movement",
  \c "circle_movement",
  \c "jump_movement",
  \c "pixel_movement",
  \c "hero",
  \c "dynamic_tile",
  \c "teletransporter",
  \c "destination",
  \c "pickable",
  \c "destructible",
  \c "carried_object",
  \c "chest",
  \c "shop_treasure",
  \c "enemy",
  \c "npc",
  \c "block",
  \c "jumper",
  \c "switch",
  \c "sensor",
  \c "separator",
  \c "wall",
  \c "crystal",
  \c "crystal_block",
  \c "stream",
  \c "door",
  \c "stairs",
  \c "bomb",
  \c "explosion",
  \c "fire",
  \c "arrow",
  \c "hookshot",
  \c "boomerang",
  \c "camera",
  \c "custom_entity".

\subsection lua_api_main_get_metatable sol.main.get_metatable(type_name)

Returns the metatable of a Solarus userdata type.

This function is very powerful and should be used with care.

All userdata objects of a type share the same metatable.
So there is a metatable for maps, a metatable for games, a metatable for
enemies, etc.

The metatable of a type stores what is common
to all instances of this type. For example, the metatable of the \c "enemy"
type has a field \c "get_life" that is the Solarus function
\ref lua_api_enemy_get_life "enemy:get_life()" shared by all enemies.

Note that you can already get the metatable of any object
with the standard Lua function \c getmetatable(object).
This function does the same thing, except that you don't have to provide an
existing object: you just provide a type name.
This allows you do manipulate the metatable of a type before objects of this
type start to exist, typically to set up things before a game is started.

You can use the metatable to add a function to all instances of a type.
Thus, you can extend the Solarus API with your own functions.
This also work for events (functions that the engine automatically calls
when they exist).
For example, you can easily provide a function \c add_overlay() to all your
maps by defining it only once in the map metatable:

\verbatim
-- Somewhere in your main script, at initialization time:

local map_metatable = sol.main.get_metatable("map")
function map_metatable:add_overlay(image_file_name)
  -- Here, self is the map.
  self.overlay = sol.surface.create(image_file_name)
end

function map_metatable:on_draw(dst_surface)
  if self.overlay ~= nil then
    self.overlay:draw(dst_surface)
  end
end

-- Now, all your maps will have a function map:add_overlay() and an event
-- map:on_draw() that allows to draw an additional image above the map!
\endverbatim

When you define a field in a metatable, everything acts like if you defined it
in all existing and future instances of the type.
However, an individual instance is still able to define a field with the same
name.
In this case, the instance has the priority: the field from the metatable is
overridden.

Similarly, you can even remove (by assigning \c nil)
or modify (by assigning a new value) any function of the Solarus API.
We don't recommend to do that because introducing differences with the
official API would be surprising for people who contribute to your game.
- \c type_name (string): Name of a Solarus userdata Lua type
  (see the list of types in
  \ref lua_api_main_get_type "sol.main.get_type()" above).
- Return value (table): The metatable of this type, or \c nil if there is no
  such Solarus type.

\remark
If you are a Lua expert, you know that metatables are a very powerful
mechanism. They are where the magic happens.
Solarus uses metatables to do a lot of things, like allowing you
to access userdata as tables. Therefore, you should never touch any metamethod
(fields whose name starts with two underscores) in the metatable of a userdata
type, in particular \c __index, \c __newindex and \c __gc.
This may result in unspecified behavior, but most likely crashes.

\subsection lua_api_main_api_get_os sol.main.get_os()

Returns the name of the running OS. Possible values are :
  \c "Windows",
  \c "Mac OS X",
  \c "Linux",
  \c "iOS",
  \c "Android".
If the correct OS name is not available, returns a string
beginning with the text \c "Unknown".
- Return value (string): The name of the running OS.

\section lua_api_main_events Events of sol.main

Events are callback methods automatically called by the engine if you define
them.

\subsection lua_api_main_on_started sol.main:on_started()

Called at the beginning of the program.

This function is called when Lua starts.
In other words, the function is called when the program begins or after it
was reset.
In this function, you will typically start an initial menu
like a title screen or a language selection screen.
If you prefer, you can also start immediately a game.

\subsection lua_api_main_on_finished sol.main:on_finished()

Called at the end of the program.

This function is called when Lua is about to be shut down, i.e.,
just before the program stops or is reset.

\subsection lua_api_main_on_update sol.main:on_update()

Called at each cycle of the program's main loop.

\remark This event is very powerful (because it is called at global level of
  the program) but it may be costly if you do heavy operations.
  Keep in mind that it is called at each cycle.
  You can usually use other callbacks instead to get notified of when an event
  happens. You can also use \ref lua_api_timer "timers" if you want to
  regularly check something.

\subsection lua_api_main_on_draw sol.main:on_draw(dst_surface)

Called when the program's screen is redrawn.

At this point, the engine has already drawn the game (if a game is running)
and has not drawn yet the menus of
\c sol.main (if you have created menus on \c sol.main).
Use this event if you want to draw some additional content.
- \c dst_surface (\ref lua_api_surface "surface"): The surface where the
  screen is drawn.

\subsection lua_api_main_on_key_pressed sol.main:on_key_pressed(key, modifiers)

Called when the user presses a keyboard key.
- \c key (string): Name of the raw key that was pressed.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible table keys are \c "shift", \c "control" and
  \c "alt". Table values don't matter.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like the game).
  However, if the key corresponds to a character, another event
  \ref lua_api_main_on_character_pressed "sol.main:on_character_pressed()"
  will also be called.

\remark This event indicates the raw key pressed. If you want to know the
corresponding character instead (if any), see
\ref lua_api_main_on_character_pressed "sol.main:on_character_pressed()".

\subsection lua_api_main_on_key_released sol.main:on_key_released(key, modifiers)

Called when the user releases a keyboard key.
- \c key (string): Name of the raw key that was released.
- \c modifiers (table): A table whose keys indicate what modifiers were
  down during the event. Possible table keys are \c "shift", \c "control" and
  \c "alt". Table values don't matter.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like the game).

\subsection lua_api_main_on_character_pressed sol.main:on_character_pressed(character)

Called when the user enters text.

- \c character (string): A utf-8 string representing the character that was
  entered.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like the game).

\remark When a character key is pressed, two events are called:
\ref lua_api_main_on_key_pressed "sol.main:on_key_pressed()"
(indicating the raw key)
and \ref lua_api_main_on_character_pressed "sol.main:on_character_pressed()"
(indicating the utf-8 character).
If you need to input text from the user,
\ref lua_api_main_on_character_pressed "sol.main:on_character_pressed()"
is what you want because it
considers the keyboard's layout and gives you international utf-8
strings.

\subsection lua_api_main_on_joypad_button_pressed sol.main:on_joypad_button_pressed(button)

Called when the user presses a joypad button.
- \c button (number): Index of the button that was pressed.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like the game).

\subsection lua_api_main_on_joypad_button_released sol.main:on_joypad_button_released(button)

Called when the user releases a joypad button.
- \c button (number): Index of the button that was released.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like the game).

\subsection lua_api_main_on_joypad_axis_moved sol.main:on_joypad_axis_moved(axis, state)

Called when the user moves a joypad axis.
- \c axis (number): Index of the axis that was moved. Usually, \c 0 is an
  horizontal axis and \c 1 is a vertical axis.
- \c state (number): The new state of the axis that was moved. \c -1 means
  left or up, \c 0 means centered and \c 1 means right or down.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like the game).

\subsection lua_api_main_on_joypad_hat_moved sol.main:on_joypad_hat_moved(hat, direction8)

Called when the user moves a joypad hat.
- \c hat (number): Index of the hat that was moved.
- \c direction8 (number): The new direction of the hat. \c -1 means that the
  hat is centered. \c 0 to \c 7 indicates that the hat is in one of the eight
  main directions.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects
  (like the game).

\subsection lua_api_main_on_mouse_pressed sol.main:on_mouse_pressed(button, x, y)

Called when the user presses a mouse button.
- \c button (string): Name of the mouse button that was pressed.
  Possible values are \c "left", \c "middle", \c "right", \c "x1" and \c "x2".
- \c x (integer): The x position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c y (integer): The y position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_main_on_mouse_released sol.main:on_mouse_released(button, x, y)

Called when the user releases a mouse button.
- \c button (string): Name of the mouse button that was released.
  Possible values are \c "left", \c "middle", \c "right", \c "x1" and \c "x2".
- \c x (integer): The x position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c y (integer): The y position of the mouse in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_main_on_finger_pressed sol.main:on_finger_pressed(finger, x, y, pressure)

Called when the user presses a finger.
- \c finger (integer): ID of the finger that was pressed.
- \c x (integer): The x position of the finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c y (integer): The y position of the finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c pressure (number): The pressure of the finger, normalized between 0 and 1.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_main_on_finger_released sol.main:on_finger_released(finger, x, y, pressure)

Called when the user releases a finger.
- \c finger (integer): ID of the finger that was pressed.
- \c x (integer): The x position of the finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c y (integer): The y position of the finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c pressure (number): The pressure of the finger, normalized between 0 and 1.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

\subsection lua_api_main_on_finger_moved sol.main:on_finger_moved(finger, x, y, dx, dy, pressure)

Called when the user moves a finger.
- \c finger (integer): ID of the finger that was pressed.
- \c x (integer): The x position of the finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c y (integer): The y position of the finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c dx (integer): The horizontal distance moved by finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c dy (integer):The vertical distance moved by finger in
  \ref lua_api_video_get_quest_size "quest size" coordinates.
- \c pressure (number): The pressure of the finger, normalized between 0 and 1.
- Return value (boolean): Indicates whether the event was handled. If you
  return \c true, the event won't be propagated to other objects.

*/

