/**
\page lua_api_enemy Enemy

\tableofcontents

An enemy is a bad guy that hurts the \ref lua_api_hero
"hero" when touching him.

This type of \ref lua_api_entity "map entity" can be declared in the
\ref lua_api_map_overview_files "map data file".
It can also be created dynamically with
\ref lua_api_map_create_enemy "map:create_enemy()".

\section lua_api_enemy_overview Overview

Enemies can exist in various breeds.
Each breed corresponds to a model of enemy with
its behavior, its
\ref lua_api_sprite "sprites" and its
\ref lua_api_movement "movements".

The script file <tt>enemies/XXXX.lua</tt> defines the enemy breed
\c XXXX.
This script is executed every time an enemy of that model is created.
The corresponding Lua enemy object is passed as parameter
of that script. Use the Lua notation \c "..." to get this parameter and store
it into a regular variable.

Here is a basic example of script for the enemy breed \c "tentacle",
a simple model of enemy that just follows the hero.
\verbatim
-- First, we put the parameter into a variable called "enemy".
-- (In Lua, the notation "..." refers to the parameter(s) of the script.)
local enemy = ...

-- Called when the enemy was just created on the map.
function enemy:on_created()

  -- Define the properties of this enemy.
  self:set_life(1)
  self:set_damage(2)
  self:create_sprite("enemies/tentacle")
  self:set_size(16, 16)
  self:set_origin(8, 13)
end

-- Called when the enemy should start or restart its movement
-- (for example if the enemy has just been created or was just hurt).
function enemy:on_restarted()

  -- Create a movement that walks toward the hero.
  local m = sol.movement.create("target")
  m:set_speed(32)
  m:start(self)
end
\endverbatim

Such a script is all what you need to define a model of enemy.
The engine handles for you the detection of collisions with the
\ref lua_api_hero "hero" or his weapons,
hurts the hero or the enemy when appropriate,
removes the enemy when it gets killed, etc.
But you can customize everything using the API described on this page,
like what kind of attacks can hurt the enemy.
You can also make complex enemies composed of several sprites, and set
different behavior to each sprite. This is very useful to program a boss.

\ref lua_api_timer "Timers" are handy to script some repeated behavior on
enemies, like performing a particular attack every 5 seconds.
Create your timers from the \ref lua_api_enemy_on_restarted
"enemy:on_restarted()" event. Timers of an enemy are automatically destroyed
when the enemy is hurt or immobilized, so that they don't get triggered
during these special states. They are also destroyed when you call
\ref lua_api_enemy_restart "enemy:restart()".
When \ref lua_api_enemy_on_restarted "enemy:on_restarted()" is
called, you are guaranteed that no timers exist on your enemy.
Thus, it is safe to create them there.

Basic enemies often have the same behavior.
To avoid duplication of code,
you can factorize some code into a generic file
and call it from each enemy breed script
with \c require(),
\ref lua_api_main_do_file "sol.main.do_file()"
or
\ref lua_api_main_load_file "sol.main.load_file()".

\section lua_api_enemy_inherited_methods Methods inherited from map entity

Enemies are particular \ref lua_api_entity "map entities".
Therefore, they inherit all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_enemy_methods Methods of the type enemy

The following methods are specific to enemies.

\subsection lua_api_enemy_get_breed enemy:get_breed()

Returns the breed (the model) of this enemy.
- Return value (string): The enemy's breed.

\subsection lua_api_enemy_get_life enemy:get_life()

Returns the current life of this enemy.
- Return value (number): Number of health points of the enemy.

\subsection lua_api_enemy_set_life enemy:set_life(life)

Sets the current life of this enemy.

The initial value is \c 1.
- \c life (number): Number of health points to set. A value of \c 0
  or lower kills the enemy.

\subsection lua_api_enemy_add_life enemy:add_life(life)

Adds some life to the enemy.
- \c life (number): Number of health points to add.

\remark Equivalent to <tt>enemy:set_life(enemy:get_life() + life)</tt>

\subsection lua_api_enemy_remove_life enemy:remove_life(life)

Removes some life from the enemy.
- \c life (number): Number of health points to remove.

\remark Equivalent to <tt>enemy:set_life(enemy:get_life() - life)</tt>

\subsection lua_api_enemy_get_damage enemy:get_damage()

Returns the number of life points that the enemy removes from the
\ref lua_api_hero "hero" when touching him.
This number will be
divided by the level of resistance ability of the player (his tunic).
- Return value (number): Damage inflicted to the hero.

\subsection lua_api_enemy_set_damage enemy:set_damage(damage)

Sets the number of life points that the enemy removes from the
\ref lua_api_hero "hero" when touching him.
This number will be divided by the
\ref lua_api_game_get_ability "tunic" level of the player,
unless you override this default calculation in
\ref lua_api_hero_on_taking_damage "hero:on_taking_damage()".

The default value is \c 1.
- \c damage (number): Damage inflicted to the hero.

\subsection lua_api_enemy_is_pushed_back_when_hurt enemy:is_pushed_back_when_hurt()

Returns whether the enemy is pushed away when it is hurt.
- Return value (boolean): \c true if the enemy is pushed away when hurt.

\subsection lua_api_enemy_set_pushed_back_when_hurt enemy:set_pushed_back_when_hurt([pushed_back_when_hurt])

Sets whether the enemy should be pushed away when it is hurt.

The default value is \c true.
- \c pushed_back_when_hurt (boolean, optional): \c true to make the enemy pushed away
  when hurt. No value means \c true.

\subsection lua_api_enemy_get_push_hero_on_sword enemy:get_push_hero_on_sword()

Returns whether the
\ref lua_api_hero "hero" is pushed away when he hits
this enemy with his sword.
- Return value (boolean): \c true if the hero is pushed away when hitting
  this enemy with his sword.

\subsection lua_api_enemy_set_push_hero_on_sword enemy:set_push_hero_on_sword([push_hero_on_sword])

Sets whether the
\ref lua_api_hero "hero" should be pushed away when he hits
this enemy with his sword.

The default value is \c false.
- \c push_hero_on_sword (boolean, optional): \c true to push the hero away when
  hitting this enemy with his sword. No value means \c true.

\subsection lua_api_enemy_get_can_hurt_hero_running enemy:get_can_hurt_hero_running()

Returns whether this enemy can hurt the
\ref lua_api_hero "hero" even when the hero is running.
- Return value (boolean): \c true if the hero can be hurt by this enemy
  even when running.

\subsection lua_api_enemy_set_can_hurt_hero_running enemy:set_can_hurt_hero_running([can_hurt_hero_running])

Sets whether this enemy can hurt the
\ref lua_api_hero "hero" even when the hero is running.

The default value is \c false.
- \c can_hurt_hero_running (boolean, optional): \c true so that the hero can be hurt
  by this enemy even when running. No value means \c true.

\subsection lua_api_enemy_get_hurt_style enemy:get_hurt_style()

Returns the style of sounds and animations to play when this enemy is hurt.
- Return value (string): \c "normal", \c "monster" or \c "boss".

\subsection lua_api_enemy_set_hurt_style enemy:set_hurt_style(hurt_style)

Sets the style of sounds and animations to play when this enemy is hurt.
The default values is \c "normal".
- \c hurt_style (string): \c "normal", \c "monster" or \c "boss".

\subsection lua_api_enemy_get_can_attack enemy:get_can_attack()

Returns whether this enemy can currently attack the
\ref lua_api_hero "hero".
- Return value (boolean): \c true if the enemy can currently attack the hero.

\subsection lua_api_enemy_set_can_attack enemy:set_can_attack([can_attack])

Sets whether this enemy can currently attack the
\ref lua_api_hero "hero".

When the enemy restarts after being hurt, \c can_attack is always
set to \c true.
- \c can_attack (boolean, optional): \c true to allow the enemy to attack the hero.
  No value means \c true.

\subsection lua_api_enemy_get_minimum_shield_needed enemy:get_minimum_shield_needed()

Returns the level of protection (if any)
that stops attacks from this enemy.

If the player has a protection
\ref lua_api_game_get_ability "ability" greater than or equal to
this value, he will stop attacks from this enemy if he is facing the direction
of the enemy.
The special value of \c 0 means that attacks cannot be stopped with the
protection ability.
Returns the required level of protection to stop attacks from this enemy.
- Return value (number): The level of protection that stops attacks from
  this enemy. A value of \c 0 means that the hero cannot stop the attacks.

\subsection lua_api_enemy_set_minimum_shield_needed enemy:set_minimum_shield_needed(minimum_shield_needed)

Sets a level of protection that stops attacks from this enemy.

If the player has a protection
\ref lua_api_game_get_ability "ability" greater than or equal to
this value, he will stop attacks from this enemy if he is facing the direction
of the enemy.
The special value of \c 0 means that attacks cannot be stopped with the
protection ability.
The default value is \c 0.
- \c minimum_shield_needed (number): The level of protection that stops
  attacks from this enemy.
  A value of \c 0 means that the hero cannot stop the attacks.

\subsection lua_api_enemy_is_traversable enemy:is_traversable()

Returns whether this enemy can be traversed by other entities.
- Return value (boolean): \c true if this enemy is traversable.

\subsection lua_api_enemy_set_traversable enemy:set_traversable([traversable])

Sets whether this enemy can be traversed by other entities.

By default, the enemy is traversable.
For example, if you want to prevent the
\ref lua_api_enemy "hero"
to pass without killing the enemy, you can use this function to make the
enemy become an obstacle.
- \c traversable (boolean, optional): \c true to make this enemy traversable.
  No value means \c true.

\remark When the enemy is not traversable, the enemy can no longer hurt the hero
  since their sprites cannot overlap anymore
  (unless if the enemy's sprite is bigger than its bounding box).
  You can use
  \ref lua_api_enemy_set_attacking_collision_mode "enemy:set_attacking_collision_mode(\"touching\")"
  to make the enemy still hurt the hero when touching him without overlapping.

\subsection lua_api_enemy_get_attacking_collision_mode enemy:get_attacking_collision_mode()

Returns the kind of collision test performed to detect when the hero should
be hurt by this enemy.
- Return value (string): A collision mode name.
  See \ref lua_api_enemy_set_attacking_collision_mode "enemy:set_attacking_collision_mode()"
  for the possible values.

\subsection lua_api_enemy_set_attacking_collision_mode enemy:set_attacking_collision_mode(collision_mode)

Sets the kind of collision test performed to detect when the hero should
be hurt by this enemy.
- collision_mode (string): A collision mode name. This may be one of:
  - \c "overlapping": Collision if the
    \ref lua_api_entity_get_bounding_box "bounding box"
    of the enemy and the hero overlap.
  - \c "containing": Collision if the bounding box of the hero is
    fully inside the bounding box of this enemy.
  - \c "origin": Collision if the \ref lua_api_entity_get_origin "origin point"
    or the hero is inside the bounding box of this enemy.
  - \c "center": Collision if the \ref lua_api_entity_get_center_position
    "center point" of the hero is inside the bounding box of this
    enemy.
  - \c "facing": Collision if the
    \ref lua_api_entity_get_facing_position "facing position" of the
    hero's bounding box is touching this enemy's bounding box.
    Bounding boxes don't necessarily overlap, but they are in
    contact: there is no space between them.
    When you consider the bounding box of the hero,
    which is a rectangle with four sides,
    the facing point is the middle point of the side the hero is oriented to.
  - \c "touching": Like \c "facing", but accepts all four sides of the hero's
    bounding box, no matter its direction.
    This \c "touching" collision test is useful when the hero cannot
    traverse your enemy (see
    \ref lua_api_enemy_set_traversable "enemy:set_traversable()").
  - \c "sprite": Collision if the tunic sprite of the hero overlaps a sprite of
    this enemy.
    The collision test is pixel precise.
    This is the default value.

\subsection lua_api_enemy_get_attack_consequence enemy:get_attack_consequence(attack)

Returns how this enemy reacts when he receives an attack.

Recall that enemies may have several \ref lua_api_sprite "sprites".
This attack consequence applies to all sprites of the enemy,
unless you override some of them with
\ref lua_api_enemy_set_attack_consequence_sprite
"enemy:set_attack_consequence_sprite()".
- \c attack (string): Name of an attack against the enemy:
  \c "sword", \c "thrown_item", \c "explosion", \c "arrow", \c "hookshot",
  \c "boomerang" or \c "fire".
- \c consequence (number, string or function): Indicates what happens when this enemy
  receives the attack.
  The possible values are the same as in
  \ref lua_api_enemy_get_attack_consequence
  "enemy:get_attack_consequence()".

\subsection lua_api_enemy_set_attack_consequence enemy:set_attack_consequence(attack, consequence)

Sets how this enemy reacts when he receives an attack.

Recall that enemies may have several \ref lua_api_sprite "sprites".
This attack consequence applies to all sprites of the enemy,
unless you override some of them with
\ref lua_api_enemy_set_attack_consequence_sprite
"enemy:set_attack_consequence_sprite()".
- \c attack (string): Name of an attack against the enemy:
  \c "sword", \c "thrown_item", \c "explosion", \c "arrow", \c "hookshot",
  \c "boomerang" or \c "fire".
- \c consequence (number, string or function): Indicates what happens when
  this enemy receives the attack. It may be:
  - A positive integer: The enemy is hurt and loses this number of life points.
    In the particular case of a sword attack, this number will by default
    be increased by the level of the sword
    (see \ref lua_api_enemy_on_hurt_by_sword "enemy:on_hurt_by_sword()").
  - \c "ignored": Nothing happens. The weapon (if any) traverses the enemy.
  - \c "protected": The enemy stops the attack. An attack failure sound is
    played.
  - \c "immobilized": The enemy is immobilized for a few seconds.
  - \c "custom": Event \ref lua_api_enemy_on_custom_attack_received
    "enemy:on_custom_attack_received()" is called.
    Note: Since Solarus 1.6, we recommend to use a function parameter instead
    for more simplicity (see below).
  - \c A function: A function to be called when this enemy receives the attack.

\subsection lua_api_enemy_get_attack_consequence_sprite enemy:get_attack_consequence_sprite(sprite, attack)

Returns how this enemy reacts when one of his \ref lua_api_sprite "sprites"
receives an attack.

This method returns the same result as
\ref lua_api_enemy_get_attack_consequence
"enemy:get_attack_consequence()",
unless you override
the reaction of the enemy for a particular sprite with
\ref lua_api_enemy_set_attack_consequence_sprite
"enemy:set_attack_consequence_sprite()".
- \c sprite (\ref lua_api_sprite "sprite"): A sprite of this enemy.
- \c attack (string): Name of an attack against the enemy:
  "sword", "thrown_item", "explosion", "arrow", "hookshot",
  "boomerang" or "fire".
- \c consequence (number, string or function): Indicates what happens when
  this sprite receives the attack.
  The possible values are the same as in
  \ref lua_api_enemy_get_attack_consequence
  "enemy:get_attack_consequence()".

\subsection lua_api_enemy_set_attack_consequence_sprite enemy:set_attack_consequence_sprite(sprite, attack, consequence)

Sets how this enemy reacts when one of his \ref lua_api_sprite "sprites"
receives an attack.

This method overrides for a particular sprite the attack consequences defined
by \ref lua_api_enemy_set_attack_consequence
"enemy:set_attack_consequence()".
- \c sprite (\ref lua_api_sprite "sprite"): A sprite of this enemy.
- \c attack (string): Name of an attack against the enemy:
  "sword", "thrown_item", "explosion", "arrow", "hookshot",
  "boomerang" or "fire".
- \c consequence (number, string or function): Indicates what happens when
  this sprite receives the attack.
  The possible values are the same as in
  \ref lua_api_enemy_get_attack_consequence
  "enemy:get_attack_consequence()".

\subsection lua_api_enemy_set_default_attack_consequences enemy:set_default_attack_consequences()

Restores the default attack consequences for this enemy and its sprites.

\subsection lua_api_enemy_set_default_attack_consequences_sprite enemy:set_default_attack_consequences_sprite(sprite)

Restores the default attack consequences for a particular sprite of this enemy.
- \c sprite (\ref lua_api_sprite "sprite"): A sprite of this enemy.

\subsection lua_api_enemy_set_invincible enemy:set_invincible()

Makes this enemy ignore all attacks.

Equivalent to calling
\ref lua_api_enemy_set_attack_consequence "enemy:set_attack_consequence(attack, \"ignored\")"
for each attack.

\subsection lua_api_enemy_set_invincible_sprite enemy:set_invincible_sprite(sprite)

Makes a sprite of this enemy ignore all attacks.

Equivalent to calling
\ref lua_api_enemy_set_attack_consequence_sprite "enemy:set_attack_consequence(sprite, attack, \"ignored\")"
for each attack.
- \c sprite (\ref lua_api_sprite "sprite"): A sprite of this enemy.

\subsection lua_api_enemy_has_layer_independent_collisions enemy:has_layer_independent_collisions()

Returns whether this enemy can detect collisions with entities
even if they are not on the same layer.

By default, enemies can only have collisions with entities on the
same layer.
- Return value (boolean): \c true if this enemy can
  detect collisions even with entities on other layers.

\subsection lua_api_enemy_set_layer_independent_collisions enemy:set_layer_independent_collisions([independent])

Sets whether this enemy can detect collisions with entities
even if they are not on the same layer.

By default, enemies can only have collisions with entities on the
same layer.
If you set this property to \c true, this enemy will be able to hurt
the \ref lua_api_hero "hero" even from a different layer.
- \c independent (boolean, optional): \c true to make this enemy detect
  collisions even
  with entities on other layers. No value means \c true.

\subsection lua_api_enemy_get_treasure enemy:get_treasure()

Returns the \ref lua_api_pickable
"pickable treasure" that will drop this enemy when killed.
- Return value 1 (string): Name of an \ref lua_api_item
  "equipment item".
  \c nil means no item dropped
  (in this case, other return values are \c nil too).
- Return value 2 (number): Variant of this equipment item
  (\c 1 means the first variant).
- Return value 3 (string): Name of the boolean
  value that stores in the \ref lua_api_game "savegame"
  whether the treasure dropped is found.
  \c nil means that the treasure is not saved.

\subsection lua_api_enemy_set_treasure enemy:set_treasure([item_name, [variant, [savegame_variable]]])

Sets the \ref lua_api_pickable
"pickable treasure" that will drop this enemy when killed.
- \c item_name (string, optional): Name of an \ref lua_api_item
  "equipment item".
  \c nil or no value means no item.
- \c variant (number, optional): Variant of this equipment item
  (\c 1 means the first variant). The default value is \c 1.
- \c savegame_variable (string, optional): Name of the boolean
  value that stores in the \ref lua_api_game "savegame"
  whether the treasure dropped is found.
  \c nil or no value means that the treasure is not saved.

\subsection lua_api_enemy_get_obstacle_behavior enemy:get_obstacle_behavior()

Returns how the enemy behaves with obstacles.
- Return value (string): \c "normal", \c "flying" or \c "swimming".

\subsection lua_api_enemy_set_obstacle_behavior enemy:set_obstacle_behavior(obstacle_behavior)

Sets how this enemy should behave with obstacles.
The default value is \c "normal".
\c "swimming" allow the enemy to traverse water.
\c "flying" allows the enemy to traverse holes, water and lava.
- \c obstacle_behavior (string): \c "normal", \c "flying" or \c "swimming".

\subsection lua_api_enemy_set_size enemy:set_size(width, height)

Sets the size of the
\ref lua_api_entity_get_bounding_box "bounding box"
of this enemy.

The default value is \c 16x16 pixels.
This is the effective size used to detect obstacles when moving,
but the \ref lua_api_sprite "sprite"
of the enemy may be larger, especially for a boss.
- \c width (number): Width of the enemy in pixels.
- \c height (number): Height of the enemy in pixels.

\remark Collisions with the
  \ref lua_api_hero "hero" are pixel-precise and use the sprite of the enemy,
  not his bounding box.
  Therefore, this function has no influence on collisions with the hero, but
  only on the detection of obstacles of the map when the enemy moves.

\subsection lua_api_enemy_set_origin enemy:set_origin(origin_x, origin_y)

Sets the origin point of this enemy, relative to the upper left corner
of its
\ref lua_api_entity_get_bounding_box "bounding box".

This origin point property allows entities of different sizes to have
comparable reference points that can be used by the engine.
Indeed, when two enemies overlap, the engine needs to determine which one
has to be displayed first
(it is always the one with the lowest Y coordinate).
Sometimes, the engine also needs to compute an angle between two entities,
for example to push away an enemy that was just hit.
Using the upper left corner of their bounding box would not give the correct
angle (unless both entities had the same size).

The origin point is also the point of synchronization of an entity with its
\ref lua_api_sprite "sprites" (because again, an entity that has a given
size may have sprites with different sizes).

The default values is <tt>8,13</tt> and is usually okay for enemies of size
\c 16x16.
See \ref lua_api_entity_get_origin "entity:get_origin()" for more explanations
about the origin point.
- \c origin_x (number): X coordinate of the origin point in pixels,
  relative to the upper left corner of the enemy's bounding box.
- \c origin_y (number): Y coordinate of the origin point in pixels,
  relative to the upper left corner of the enemy's bounding box.

\subsection lua_api_enemy_restart enemy:restart()

Restarts this enemy.

This plays animation \c "walking" on its \ref lua_api_sprite "sprites",
destroys any timer of the enemy
and calls the event \ref lua_api_enemy_on_restarted "enemy:on_restarted()".

This function has no effect if the enemy is dying.

\subsection lua_api_enemy_hurt enemy:hurt(life_points)

Hurts this enemy if he is currently vulnerable.

If the enemy is vulnerable, the hurting animation and sound start
and the given number of life points are removed.

Nothing happens if the enemy is currently invulnerable
(for example because he is already being hurt).
- \c life_points (number): Number of life points to remove from the enemy.

\remark If you just want to silently remove some life, call
\ref lua_api_enemy_remove_life "enemy:remove_life()" instead.

\subsection lua_api_enemy_immobilize enemy:immobilize()

Immobilizes this enemy for a while if possible.

After a few seconds, the enemy shakes and then restarts.

\subsection lua_api_enemy_create_sprite enemy:create_sprite(animation_set_id, [sprite_name])

Creates a \ref lua_api_sprite "sprite" for this enemy.
- \c animation_set_id (string): Animation set to use for the sprite.
- \c sprite_name (string, optional): An optional name to identify the created
  sprite. Only useful for entities with multiple sprites (see
  \ref lua_api_entity_get_sprite "entity:get_sprite()").
- Return value (\ref lua_api_sprite "sprite"): The sprite created.

\remark If you don't create a sprite, your enemy will be invisible.

\subsection lua_api_enemy_remove_sprite enemy:remove_sprite([sprite])

Removes and destroys a
\ref lua_api_sprite "sprite" of this enemy.

The sprite must have been created before by
\ref lua_api_enemy_create_sprite "enemy:create_sprite()".
- \c sprite (\ref lua_api_sprite "sprite"): The sprite to remove.
  The default value is the first sprite that was created.

\subsection lua_api_enemy_create_enemy enemy:create_enemy(properties)

Creates another enemy on the \ref lua_api_map "map",
specifying its coordinates as relative to the current enemy.

This function is similar to
\ref lua_api_map_create_enemy "map:create_enemy()"
but the coordinates are relative to the current enemy,
and the layer is the one of the current enemy by default.
- \c properties (table): A table that describes all properties of the enemy
  to create. Its key-value pairs must be:
  - \c name (string, optional): Name identifying the entity.
    If the name is already used by another entity, a suffix (of the form
    \c "_2", \c "_3", etc.) will be automatically appended to keep entity names
    unique.
    No value means no name.
  - \c layer (number, optional): The layer, between
    \ref lua_api_map_get_min_layer "map:get_min_layer()" and
    \ref lua_api_map_get_max_layer "map:get_max_layer()".
    No value means the same layer as the current enemy.
  - \c x (number, optional): X coordinate on the map, relative to the current
    enemy. The default value is \c 0.
  - \c y (number, optional): Y coordinate on the map, relative to the current
    enemy. The default value is \c 0.
  - \c direction (number, optional): Initial direction of the enemy, between
    \c 0 (East) and \c 3 (South). The default value is \c 3.
  - \c breed (string): Model of enemy to create.
  - \c savegame_variable (string, optional): Name of the boolean value that
    stores in the \ref lua_api_game "savegame" whether this enemy is dead.
    No value means that the enemy is not saved.
    If the enemy is saved and was already killed, then no enemy is created.
    Instead, its \ref lua_api_pickable "pickable treasure" is created if it
    is a saved one.
  - \c treasure_name (string, optional): Kind of
    \ref lua_api_pickable "pickable treasure" to drop when the
    enemy is killed
    (the name of an \ref lua_api_item "equipment item").
    If this value is not set, or corresponds to a
    \ref lua_api_item_is_obtainable "non obtainable" item, then
    the enemy won't drop anything.
  - \c treasure_variant (number, optional): Variant of the treasure
    (because some \ref lua_api_item "equipment items"
    may have several variants).
    The default value is \c 1 (the first variant).
  - \c treasure_savegame_variable (string, optional): Name of the boolean
    value that stores in the \ref lua_api_game "savegame"
    whether the \ref lua_api_pickable "pickable treasure"
    of this enemy was obtained.
    No value means that the state of the treasure is not saved.
    If the treasure is saved and the player already has it, then the
    enemy won't drop anything.
- Return value (enemy or \ref lua_api_pickable
  "pickable treasure"): The enemy created, except when it is a saved enemy
  that is already dead.
  In this case, if the enemy dropped a saved
  treasure that is not obtained yet, this
  \ref lua_api_pickable "pickable treasure" is created and returned.
  Otherwise, \c nil is returned.

\section lua_api_enemy_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

Enemies are particular \ref lua_api_entity "map entities".
Therefore, they inherit all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_enemy_events Events of the type enemy

The following events are specific to enemies.

\subsection lua_api_enemy_on_update enemy:on_update()

Called at each cycle while this enemy is alive.

\remark As this function is called at each cycle, it is recommended to use other
solutions when possible, like \ref lua_api_timer "timers" and other events.

\subsection lua_api_enemy_on_suspended enemy:on_suspended(suspended)

Called when the \ref lua_api_map "map"
has just been suspended or resumed.

The map is suspended by the engine in a few cases, like when the \ref
lua_api_game "game" is
paused or when the camera is being moved by a script.
When this happens, all \ref lua_api_entity "map entities" stop moving and most
\ref lua_api_sprite "sprites" stop their animation.
- \c suspended (boolean): \c true if the map was just suspended, \c
  false if it was resumed.

\subsection lua_api_enemy_on_enabled enemy:on_enabled()

called when this enemy has just been
\ref lua_api_entity_is_enabled "enabled".

\subsection lua_api_enemy_on_disabled enemy:on_disabled()

called when this enemy has just been
\ref lua_api_entity_is_enabled "disabled".

\subsection lua_api_enemy_on_restarted enemy:on_restarted()

Called when this enemy should start or restart its
\ref lua_api_movement "movement" and
\ref lua_api_timer "timers" because
something happened.
For example, the enemy has just been created,
or it was just hurt or immobilized, or you called
\ref lua_api_enemy_restart "enemy:restart()".
If your enemy should move, this is the right place to create its movement.

\ref lua_api_timer "Timers" associated to the enemy were
automatically destroyed.
Thus, you should also recreate them from this event.

\subsection lua_api_enemy_on_pre_draw enemy:on_pre_draw()

Called just before the enemy is drawn on the map.
You may display additional things below the enemy.

\subsection lua_api_enemy_on_post_draw enemy:on_post_draw()

Called just after the enemy is drawn on the map.
You may display additional things above the enemy.

\subsection lua_api_enemy_on_collision_enemy enemy:on_collision_enemy(other_enemy, other_sprite, my_sprite)

Called when a \ref lua_api_sprite "sprite"
of this enemy overlaps another enemy's sprite.
- \c other_enemy (enemy): Another enemy.
- \c other_sprite (\ref lua_api_sprite "sprite"): A sprite of that other enemy.
- \c my_sprite (\ref lua_api_sprite "sprite"): A sprite of the current enemy.

\subsection lua_api_enemy_on_custom_attack_received enemy:on_custom_attack_received(attack, sprite)

Called when this enemy receives an attack with a custom effect.

This function is called if you have set
\ref lua_api_enemy_get_attack_consequence "consequence of the attack"
to \c "custom".
You have to define what happens, for example hurting the enemy, making a
special reaction, etc.
- \c attack (string): The attack that was received:
  \c "sword", \c "thrown_item", \c "explosion",
  \c "arrow", \c "hookshot", \c "boomerang" or \c "fire".
  In the particular case of a \c "sword" attack, the sword state is stopped
  and the hero goes back to state \c "free".
- \c sprite (\ref lua_api_sprite "sprite"): The sprite of this enemy
  that receives the attack, or \c nil if the attack does not come from a
  pixel-precise collision.

\remark Instead of using this event and the attack consequence \c "custom",
  you can now simply pass a callback parameter to
  \ref lua_api_enemy_set_attack_consequence "enemy:set_attack_consequence()"
  or to
  \ref lua_api_enemy_set_attack_consequence_sprite "enemy:set_attack_consequence_sprite()".

\subsection lua_api_enemy_on_hurt_by_sword enemy:on_hurt_by_sword(hero, enemy_sprite)

Called when this enemy is successfully hurt by the sword of the hero.

You should define this event to customize the damage inflicted by the sword.

This event can only be called if the
\ref lua_api_enemy_get_attack_consequence "reaction" to the \c "sword" attack is
hurting the enemy.

At this point, the enemy is in the state of being hurt.
His hurting animation and sound have just started.
This is a good time to remove some life points with
\ref lua_api_enemy_remove_life "enemy:remove_life()".

By default, if you don't define this event, the enemy loses a number of
life points computed as
\ref lua_api_enemy_get_attack_consequence "his reaction to sword attacks"
multiplied by
the sword \ref lua_api_game_get_ability "ability level" of the hero,
and doubled during a spin attack.
- \c hero (\ref lua_api_hero "hero"): The hero who used the sword.
- \c enemy_sprite (\ref lua_api_sprite "sprite"): The sprite of this enemy that
  was hit.
  You may use this information if your enemy has several sprites with
  different behaviors.

\subsection lua_api_enemy_on_hurt enemy:on_hurt(attack)

Called when this enemy is successfully hurt by any attack.

This event can only be called if the
\ref lua_api_enemy_get_attack_consequence "reaction" to the attack is
hurting the enemy.

At this point, the enemy is in the state of being hurt.
His hurting animation and sound have just started
and he has just lost some life.
- \c attack (string): The attack that was received:
  \c "sword", \c "thrown_item", \c "explosion",
  \c "arrow", \c "hookshot", \c "boomerang",
  \c "fire", or \c "script".

\remark In the case of a \c "sword" attack, this event is called
  right after
  \ref lua_api_enemy_on_hurt_by_sword "enemy:on_hurt_by_sword()".

\subsection lua_api_enemy_on_dying enemy:on_dying()

Called when the enemy's life comes to \c 0.

When the life comes to \c 0, the movement of the enemy is stopped,
its timers are stopped too, the dying animation starts and a sound
is played.
The details of the dying animation and the sound played depend on the
\ref lua_api_enemy_set_hurt_style "hurt style" property.
If the hurt style is \c "enemy" or \c "monster", any sprite you created
on the enemy is automatically removed and replaced by the sprite
\c "enemies/enemy_killed".
If the hurt style is \c "boss", your sprites continue to exist and to play
animation "hurt", while explosions appear on the enemy.

In both cases, the enemy will be removed from the map when the dying animation
ends.

\remark This event is called right after
  \ref lua_api_enemy_on_hurt "enemy:on_hurt()".

\subsection lua_api_enemy_on_dead enemy:on_dead()

Called when the enemy's dying animation is finished.

At this point, the enemy no longer exists on the map.
In other words,
\ref lua_api_entity_exists "enemy:exists()" returns \c false,
trying to get the enemy from its name returns \c nil,
and functions like
\ref lua_api_map_get_entities_count "map:get_entities(prefix)"
won't find this enemy.

This means that you can safely use
\ref lua_api_map_has_entities "map:has_entities(prefix)" from
<tt>enemy:on_dead()</tt> to detect when all enemies with a common prefix
are dead.

\subsection lua_api_enemy_on_immobilized enemy:on_immobilized()

Called when the enemy is immobilized.

\subsection lua_api_enemy_on_attacking_hero enemy:on_attacking_hero(hero, enemy_sprite)

Called when the \ref lua_api_hero "hero" is successfully touched by this enemy.

This event is not called if the hero was protected by his shield,
or if he currently cannot be hurt for some reason, like when he is already being
hurt, when he is
\ref lua_api_hero_set_invincible "temporarily invincible",
or when he is in a special
\ref lua_api_hero_get_state "state"
like brandishing a treasure.

Your script can define this event to customize what bad things happen to the
hero.
If you define this event, the engine does absolutely nothing and lets you
handle this.

If you don't define this event, the hero is hurt with the predefined behavior
as follows.
The hero goes to the state \c "hurt" where is pushed away from the enemy.
He loses some life depending on the enemy's
\ref lua_api_enemy_get_damage "damage" property,
and on the hero's
\ref lua_api_game_get_ability "tunic"
and on \ref lua_api_hero_on_taking_damage "hero:on_taking_damage()" if defined.
Then, he recovers and his sprites blink for a while.
During this short period, he is temporarily invincible.
- \c hero (\ref lua_api_hero "hero"): The hero being attacked.
- \c enemy_sprite (\ref lua_api_sprite "sprite"): The sprite of the enemy that
  caused the collision with the hero. You may use this information if your
  enemy has several sprites with different behaviors.
  This value is \c nil if the attack does not come from a sprite collision test
  (see
  \ref lua_api_enemy_set_attacking_collision_mode "enemy:set_attacking_collision_mode()").

\remark If you call \ref lua_api_hero_start_hurt_entity "hero:start_hurt()",
  you will obtain something equivalent to the default behavior.
  But if you don't, keep in mind that
  if the hero can still be hurt after your call,
  this event will continue to be called while
  there is a collision with the enemy.
  To avoid this, see for example
  \ref lua_api_hero_set_invincible "hero:set_invincible()"
  to make the hero temporarily invincible.

*/

