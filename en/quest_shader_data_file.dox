/**
\page quest_shader_data_file Shader description file

\tableofcontents

Shaders allow you to modify the video rendering of the window or of
drawable objects like sprites, surfaces and text surfaces.

For example, shaders can be used to apply a smoothing filter or to
make some advanced visual effects to a sprite, to a surface or to
the whole window.

Shaders are programs executed by the GPU during a rendering pass.
They are written in a shading language
(GLSL or GLSL ES in Solarus).
See the documentation of OpenGL and OpenGL ES for more information
about shaders and shading languages.

A shader program is usually divided in two parts: a vertex shader and a
fragment shader (also called pixel shader).
As Solarus is a 2D engine, the vertex shader transforms the 4 vertices of the
2D image to be rendered, and the fragment shader determines all final pixels
to be displayed for this image.

\remark We often say a shader for short to actually mean shader program,
that is, a program composed of a vertex shader plus a fragment shader.

We explain here the organization of shader files in Solarus and their syntax.
See the \ref lua_api_shader "shader API" to know how to use shaders at
runtime from your Lua scripts.

The \c shaders directory contains all shaders.
For a shader program with id \c xx,
there can be three files:
- \c xx.dat: A data file describing the properties of the shader program, in
  particular the name of the vertex shader file and of the fragment shader file.
  The syntax of this description file is detailed below.
- \c *.glsl (optional): The vertex shader code.
  It can have any name (with the extension \c .glsl).
  If no vertex shader file is specified, a default vertex shader that does
  nothing special will be used.
- \c *.glsl (optional): The fragment shader code.
  It can have any name (with the extension \c .glsl).
  If no fragment shader file is specified, a default fragment shader that does
  nothing special will be used (pixels will be unchanged).

See the documentation of OpenGL and OpenGL ES for the specification of
GLSL and GLSL ES shading languages.

Note that this file structure allows different shader programs to use the same
vertex shader code file or the same fragment shader code file.

\section quest_shader_data_file_syntax Syntax of the shader description file

Solarus Quest Editor fully supports the edition of shader description files
(not to be confused with vertex shaders and fragment shaders themselves,
that is, the GLSL / GLSL ES code files).
You should not have to edit shader description files by hand unless you know
what you are doing.

A shader description file only defines the name of the vertex shader file
and the name of the fragment shader file.

We now specify the syntax of a shader description file.

The sequence of characters \c \-\- (two dashes) marks
the beginning of a comment.
After them, the rest of the line is ignored by the engine.

Empty lines are also ignored.
The definition of a vertex shader starts with \c vertex_shader{ and ends with
\c }.
Similarly, the definition of a fragment shader starts with
\c fragment_shader{ and ends with \c }.
The vertex shader and the fragment shader are both optional.
Inside the braces, the properties of the vertex or fragment shader are
specified.
Properties are declared with the syntax <tt>key = value</tt> and
separated with commas.
It is allowed to have an extra comma after the last property.
String values should be enclosed within double quotes and cannot have
line breaks.

Currently, there is only one property:
- \c source_file (string): Name of the shader code file for this vertex
  shader or fragment shader, relative to the \c shaders directory.
  It must end with <tt>.glsl</tt>.

Example of a shader description file:

\verbatim
vertex_shader{
  source_file = "default.vertex.glsl",
}

fragment_shader{
  source_file = "scale_2x.fragment.glsl",
}
\endverbatim

\remark The syntax of shader description files is actually valid Lua.
  The engine and the editor internally use Lua to parse it.

*/
