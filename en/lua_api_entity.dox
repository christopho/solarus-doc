/**
\page lua_api_entity Map entities

\tableofcontents

Objects placed on the \ref lua_api_map "map"
are called map entities (or just entities).

There exists many types of entities. They can be either declared in the
\ref quest_map_data_file "map data file", or created dynamically by using
the <tt>map:create_*</tt> methods of the \ref lua_api_map
"map API".

\section lua_api_entity_overview Overview

All entities have a position on the map (X, Y and layer)
and a size.
Depending on their type,
they can be visible or not. When they are visible,
they are usually represented by one or several
\ref lua_api_sprite "sprites".
Some entities are fixed, others move according to a
\ref lua_api_movement "movement" object.

Entities can also have a name that uniquely identifies them on the map.
This is useful to access them from the \ref lua_api_map "map API".
The name is optional, but if an entity has a name, it must be unique on the
map.

Here are the existing types of entities.
- \subpage lua_api_hero "Hero": The character controlled by the player.
- \subpage lua_api_tile "Tile": A small brick that composes a piece of the
  \ref lua_api_map "map", with a pattern picked
  from the tileset.
- \subpage lua_api_dynamic_tile "Dynamic tile": A special
  \ref lua_api_tile "tile"
  that can be enabled or disabled dynamically (\ref lua_api_tile "usual tiles"
  are optimized away at runtime).
- \subpage lua_api_teletransporter "Teletransporter": When walking on it, the
  \ref lua_api_hero "hero" is transported somewhere, possibly on
  the same \ref lua_api_map "map" or another map.
- \subpage lua_api_destination "Destination": A possible destination place for
  \ref lua_api_teletransporter "teletransporters".
- \subpage lua_api_pickable "Pickable treasure": A treasure placed on the ground
  and that the \ref lua_api_hero "hero" can pick up.
- \subpage lua_api_destructible "Destructible object": An entity that can be cut
  or lifted by \ref lua_api_hero "hero", and that may hide a
  \ref lua_api_pickable "pickable treasure".
- \subpage lua_api_carried_object "Carried object": A \ref lua_api_destructible
  "destructible object" lifted and carried by the \ref lua_api_hero "hero".
- \subpage lua_api_chest "Chest": A chest that contains a treasure.
- \subpage lua_api_shop_treasure "Shop treasure": A treasure that the \ref
  lua_api_hero "hero" can buy for a price.
- \subpage lua_api_enemy "Enemy": A bad guy (possibly a boss) who may also drop
  a \ref lua_api_pickable "pickable treasure" when killed.
- \subpage lua_api_npc "Non-playing character" (NPC): Somebody or something the
  \ref lua_api_hero "hero" can interact with.
- \subpage lua_api_block "Block": An entity that the \ref lua_api_hero "hero"
  can push or pull.
- \subpage lua_api_jumper "Jumper": When walking on it, the \ref lua_api_hero
  "hero" jumps into a direction.
- \subpage lua_api_switch "Switch": A button or another mechanism that the \ref
  lua_api_hero "hero" can activate.
- \subpage lua_api_sensor "Sensor": An invisible detector that detects the
  presence of the \ref lua_api_hero "hero".
- \subpage lua_api_separator "Separator": An horizontal or vertical
  separation between two parts of the map.
- \subpage lua_api_wall "Wall": An invisible object that stops some kinds of
  entities.
- \subpage lua_api_crystal "Crystal": A switch that lowers or raises
  \ref lua_api_crystal_block "crystal blocks".
- \subpage lua_api_crystal_block "Crystal block": A low wall that can be
  lowered
  (travserable) or raised (obstacle) using a \ref lua_api_crystal "crystal".
- \subpage lua_api_stream "Stream": When walking on it, the \ref
  lua_api_hero "hero" automatically moves into a direction.
- \subpage lua_api_door "Door": A door to open with an \ref lua_api_item
  "equipment item" or another condition.
- \subpage lua_api_stairs "Stairs": %Stairs between two \ref lua_api_map "maps"
  or to a platform of a single map.
- \subpage lua_api_bomb "Bomb": A bomb that will explode after a few seconds
  and that may be lifted by the \ref lua_api_hero "hero".
- \subpage lua_api_explosion "Explosion": An explosion that can hurt the
  \ref lua_api_hero "hero" and the \ref lua_api_enemy "enemies".
- \subpage lua_api_fire "Fire": A flame that can hurt
  \ref lua_api_enemy "enemies" and interact with other entities.
- \subpage lua_api_arrow "Arrow": An arrow shot by the bow.
- \subpage lua_api_hookshot "Hookshot": A hookshot shot by the
  \ref lua_api_hero "hero".
- \subpage lua_api_boomerang "Boomerang": A boomerang shot by the
  \ref lua_api_hero "hero".
- \subpage lua_api_camera "Camera": A rectangle that determines the visible
  area of the map.
- \subpage lua_api_custom_entity "Custom entity": An entity fully controlled
  by your Lua scripts.

\remark Note that \ref lua_api_sprite "sprites" and \ref lua_api_movement
"movements" are not map entities, but they can be attached to map entities
(to display them and to move them, respectively).
Sprites and movements can also be used outside a
\ref lua_api_map "map", for example in your title screen or in other
\ref lua_api_menu "menus".

\section lua_api_entity_methods Methods of all entity types

These methods exist in all entity types.

\subsection lua_api_entity_get_type entity:get_type()

Returns the type of entity.
- Return value (string): The type of this entity. Can be one of:
  \c "hero",
  \c "dynamic_tile",
  \c "teletransporter",
  \c "destination",
  \c "pickable",
  \c "destructible",
  \c "carried_object",
  \c "chest",
  \c "shop_treasure",
  \c "enemy",
  \c "npc",
  \c "block",
  \c "jumper",
  \c "switch",
  \c "sensor",
  \c "separator",
  \c "wall",
  \c "crystal",
  \c "crystal_block",
  \c "stream",
  \c "door",
  \c "stairs",
  \c "bomb",
  \c "explosion",
  \c "fire",
  \c "arrow",
  \c "hookshot",
  \c "boomerang" or
  \c "custom_entity".

\remark The type \c "tile" is not is this list because
  \ref lua_api_tile "tiles" don't exist at
  runtime for optimization reasons.

\subsection lua_api_entity_get_map entity:get_map()

Returns the map this entity belongs to.
- Return value (\ref lua_api_map "map"): The map that contains this entity.

\subsection lua_api_entity_get_game entity:get_game()

Returns the game that is running the map this entity belongs to.
- Return value (\ref lua_api_game "game"): The current game.

\subsection lua_api_entity_get_name entity:get_name()

Returns the name of this map entity.

The name uniquely identifies the entity on the map.
- Return value (string): The name of this entity, or \c nil if the
  entity has no name (because the name is optional).

\subsection lua_api_entity_exists entity:exists()

Returns whether this entity still exists on the map.

An entity gets destroyed when you call
\ref lua_api_entity_remove "entity:remove()"
or when the engine removes it
(for example an \ref lua_api_enemy "enemy" that gets killed
or a \ref lua_api_pickable "pickable treasure" that gets picked up).
If you refer from Lua to an entity that no longer exists in the C++ side,
this method returns \c false.
- Return value (boolean): \c true if the entity exists, \c false if it was
  destroyed.

\subsection lua_api_entity_remove entity:remove()

Removes this entity from the map and destroys it.

After the entity is destroyed, \ref lua_api_entity_exists
"entity:exists()" returns \c false and there is no reason to keep a
reference to it in the Lua side (though it is harmless).

\subsection lua_api_entity_is_enabled entity:is_enabled()

Returns whether this entity is enabled.

When an entity is disabled, it is not displayed on the map, it does
not move and does not detect collisions.
But it still exists, it still has a position and it can be enabled again later.
- Return value (boolean): \c true if this entity is enabled.

\subsection lua_api_entity_set_enabled entity:set_enabled([enabled])

Enables or disables this entity.

When an entity is disabled, it is not displayed on the map, it does
not move and does not detect collisions.
Its
\ref lua_api_movement "movement",
its
\ref lua_api_sprite "sprites"
and its
\ref lua_api_timer "timers"
if any are suspended and will be resumed when the entity gets enabled again.
While the entity is disabled, it still exists, it still has a position and it
can be enabled again later.
- \c enabled (boolean, optional): \c true to enable the entity, \c false to
  disable it. No value means \c true.

\subsection lua_api_entity_get_size entity:get_size()

Returns the size of the bounding box of this entity.

The
\ref lua_api_entity_get_bounding_box "bounding box"
determines the position of the entity on the map.
It is a rectangle whose width and height are multiples
of 8 pixels.
The bounding box is used to detect whether the entity overlaps obstacles or
other entities.
- Return value 1 (number): Width of the entity in pixels.
- Return value 2 (number): Height of the entity in pixels.

\remark Note that the \ref lua_api_sprite "sprites" of an entity may have a
  different size than the entity itself.
  See
  \ref lua_api_sprite_get_size "sprite:get_size()"
  to know it.

\subsection lua_api_entity_get_origin entity:get_origin()

Returns the origin point of this entity, relative to the upper left corner
of its
\ref lua_api_entity_get_bounding_box "bounding box".

When an entity is located at some coordinates on the \ref lua_api_map "map",
the origin points determines what exact point of the entity's bounding box
is at those coordinates.
It is not necessarily the upper left corner of the entity's
bounding box.

The origin point is usually be the central point of contact between the entity
and the ground. For example, the origin point of the \ref lua_api_hero "hero",
\ref lua_api_enemy "enemies", \ref lua_api_npc
"non-playing characters" and most entities
is the center of their shadow.
Thus, for entities of size (<tt>16,16</tt>), the origin point is
often (<tt>8,13</tt>).

This origin point property allows entities of different sizes to have
comparable reference points that can be used by the engine.
Indeed, when two enemies overlap, the engine needs to determine which one
has to be displayed first
(it is always the one with the lowest Y coordinate).
Sometimes, the engine also needs to compute an angle between two entities,
for example to push away an enemy that was just hit.
Using the upper left corner of their
\ref lua_api_entity_get_bounding_box "bounding box"
would not give the correct
angle (unless both entities had the same size).

The origin point is also the point of synchronization of an entity with its
\ref lua_api_sprite "sprites" (because again, an entity that has a given
size may have sprites with different sizes).
- Return value 1 (number): X coordinate of the origin point in pixels,
  relative to the upper left corner of the entity's bounding box.
- Return value 2 (number): Y coordinate of the origin point in pixels,
  relative to the upper left corner of the entity's bounding box.

\subsection lua_api_entity_get_position entity:get_position()

Returns the position of this entity on the \ref lua_api_map "map"
(coordinates and layer).
- Return value 1 (number): X coordinate of the \ref lua_api_entity_get_origin
  "origin point" of the entity,
  relative to the upper left corner of the map.
- Return value 2 (number): Y coordinate of the \ref lua_api_entity_get_origin
  "origin point" of the entity,
  relative to the upper left corner of the map.
- Return value 3 (number): Layer where the entity is on the map, between
  \ref lua_api_map_get_min_layer "map:get_min_layer()" and
  \ref lua_api_map_get_max_layer "map:get_max_layer()".

\subsection lua_api_entity_set_position entity:set_position(x, y, [layer])

Changes instantly the position of this entity on the map
(coordinates and layer).
The \ref lua_api_entity_get_origin "origin point" of the
entity gets placed at these coordinates,
relative to the map's upper left corner.
Any previous movement or other action performed by the entity
continues normally.
- \c x (number): X coordinate to set.
- \c y (number): Y coordinate to set.
- \c layer (number, optional): Layer to set, between
  \ref lua_api_map_get_min_layer "map:get_min_layer()" and
  \ref lua_api_map_get_max_layer "map:get_max_layer()".
  By default, the layer is unchanged.

\remark Be careful: this function does not check collisions with obstacles.

\subsection lua_api_entity_get_center_position entity:get_center_position()

Returns the coordinates of the center point of this entity on the
\ref lua_api_map "map".
- Return value 1 (number): X coordinate of the center of this entity's
  bounding box,
  relative to the upper left corner of the map.
- Return value 2 (number): Y coordinate of the center of this entity's
  bounding box,
  relative to the upper left corner of the map.
- Return value 3 (number): Layer of the entity.

\subsection lua_api_entity_get_facing_position entity:get_facing_position()

Returns the coordinates of the point this entity is looking at.
This point depends on the direction of the main sprite if any.
If the entity has no sprite, or if the main sprite has not 4 directions,
then the movement is considered.
If there is no movement either, the entity is assumed to look to the North.
- Return value 1 (number): X coordinate of the facing point of this entity,
  relative to the upper left corner of the map.
- Return value 2 (number): Y coordinate of the facing point of this entity,
  relative to the upper left corner of the map.
- Return value 3 (number): Layer of the entity.

\subsection lua_api_entity_get_facing_entity entity:get_facing_entity()

Returns the entity this entity is looking at, if any.

This is an entity overlapping the
\ref lua_api_entity_get_facing_position "facing position" of this entity.
If several entities are overlapping the facing position,
the first one in Z order is returned.
- Return value (entity): The facing entity, or \c nil
  if there is no entity in front of this entity.

\subsection lua_api_entity_get_ground_position entity:get_ground_position()

Returns the coordinates of the point used for ground detection for this
entity on the \ref lua_api_map "map".

The ground position is the point tested by all features related to the ground,
like all effects of various grounds on the
\ref lua_api_hero "hero",
the result of
\ref lua_api_entity_get_ground_below "entity:get_ground_below()"
and the event
\ref lua_api_custom_entity_on_ground_below_changed
"custom_entity:on_ground_below_changed()".
- Return value 1 (number): X coordinate of the ground point of this entity,
  relative to the upper left corner of the map.
- Return value 2 (number): Y coordinate of the ground point of this entity,
  relative to the upper left corner of the map.
- Return value 3 (number): Layer of the entity.

\remark The ground point of an entity is slightly (2 pixels)
  above its origin point as returned by
  \ref lua_api_entity_get_position "entity:get_position()".

\subsection lua_api_entity_get_ground_below entity:get_ground_below()

Returns the map's ground below this entity.

The ground is defined by the topmost
\ref lua_api_tile "tile" below this entity,
plus potential dynamic entities that may affect the ground,
like
\ref lua_api_dynamic_tile "dynamic tiles",
\ref lua_api_destructible "destructibles"
and
\ref lua_api_custom_entity "custom entities".

The exact point tested is the one returned by
\ref lua_api_entity_get_ground_position "entity:get_ground_position()",
and it is slightly different from
\ref lua_api_entity_get_position "entity:get_position()".
- Return value (string): The ground below this entity.
  See \ref lua_api_map_get_ground "map:get_ground()" for the list of possible grounds.

\subsection lua_api_entity_get_bounding_box entity:get_bounding_box()

Returns the rectangle representing the
\ref lua_api_entity_get_position "coordinates"
and
\ref lua_api_entity_get_size "size" of this entity
on the
\ref lua_api_map "map".

The
\ref lua_api_entity_get_bounding_box "bounding box"
determines the position of the entity on the map.
It is a rectangle whose width and height are multiples
of 8 pixels.
The bounding box is used to detect whether the entity overlaps obstacles or
other entities.
- Return value 1 (number): X coordinate of the upper left corner of the
  bounding box.
- Return value 2 (number): Y coordinate of the upper left corner of the
  bounding box.
- Return value 3 (number): Width of the bounding box.
- Return value 4 (number): Height of the bounding box.

\remark The sprites of this entity (if any) may exceed the bounding box.
  See
  \ref lua_api_entity_get_max_bounding_box
  "entity:get_max_bounding_box()".

\subsection lua_api_entity_get_max_bounding_box entity:get_max_bounding_box()

Returns the rectangle surrounding the bounding box of this entity
plus the bounding boxes of its sprites
in all their possible animations and directions.

This is usually larger than
\ref lua_api_entity_get_bounding_box
"entity:get_bounding_box()", because the sprite of an entity often
exceeds its bounding box.
- Return value 1 (number): X coordinate of the upper left corner of the
  sprites bounding box.
- Return value 2 (number): Y coordinate of the upper left corner of the
  sprites bounding box.
- Return value 3 (number): Width of the sprites bounding box.
- Return value 4 (number): Height of the sprites bounding box.

\subsection lua_api_entity_get_layer entity:get_layer()

Returns the layer of this entity on the \ref lua_api_map "map".
- Return value (number): Layer where the entity is on the map, between
  \ref lua_api_map_get_min_layer "map:get_min_layer()" and
  \ref lua_api_map_get_max_layer "map:get_max_layer()".

\subsection lua_api_entity_set_layer entity:set_layer(layer)

Changes the layer of this entity on the map.
The X and Y coordinates of the entity are unchanged.
Any previous movement or action performed by the entity continues normally.
- \c layer (number, optional): Layer to set, between
  \ref lua_api_map_get_min_layer "map:get_min_layer()" and
  \ref lua_api_map_get_max_layer "map:get_max_layer()".

\remark Be careful: this function does not check collisions with obstacles.

\subsection lua_api_entity_overlaps_rectangle entity:overlaps(x, y, [width, height])

Returns whether the
\ref lua_api_entity_get_bounding_box "bounding box"
of this entity overlaps the specified rectangle or point.

To test if this entity overlaps a rectangle or a point (a point is a rectangle
of size 1x1):
- \c x (number): X coordinate of the upper left corner of the rectangle
  to check.
- \c y (number): Y coordinate of the upper left corner of the rectangle
  to check.
- \c width (number, optional): Width of the rectangle (default \c 1).
- \c height (number, optional): Height of the rectangle (default \c 1).
- Return value (boolean): \c true if the bounding box of this entity overlaps
  the rectangle.

\subsection lua_api_entity_overlaps_entity entity:overlaps(other_entity, [collision_mode])

Returns whether another entity collides with this entity according to
the specified collision test.
- \c entity (entity): Another entity.
- \c collision_mode (string, optional): Specifies what kind of collision you
  want to test. This may be one of:
  - \c "overlapping": Collision if the
    \ref lua_api_entity_get_bounding_box "bounding box"
    of both entities overlap.
    This is the default value.
  - \c "containing": Collision if the bounding box of the other entity is
    fully inside the bounding box of this entity.
  - \c "origin": Collision if the \ref lua_api_entity_get_origin "origin point"
    or the other entity is inside the bounding box of this entity.
  - \c "center": Collision if the \ref lua_api_entity_get_center_position
    "center point" of the other entity is inside the bounding box of this
    entity.
  - \c "facing": Collision if the
    \ref lua_api_entity_get_facing_position "facing position" of the other
    entity's bounding box is touching this entity's bounding box.
    Bounding boxes don't necessarily overlap, but they are in
    contact: there is no space between them.
    When you consider the bounding box of an entity,
    which is a rectangle with four sides,
    the facing point is the middle point of the side the entity is oriented to.
    This \c "facing" collision test is useful when the other entity cannot
    traverse your custom entity.
    For instance, if the other entity has direction "east", there is a
    collision if the middle of the east side of its bounding box touches
    (but does not necessarily overlap) this entity's bounding box.
    This is typically what you need to let the hero interact with
    this entity when he is looking at it.
  - \c "touching": Like \c "facing", but accepts all four sides of the other
    entity's bounding box, no matter its direction.
  - \c "sprite": Collision if a sprite of the other entity overlaps a sprite of
    this entity.
    The collision test is pixel precise.
- Return value (boolean): \c true if a collision is detected with this collision test.

\remark For custom entities, see also
  \ref lua_api_custom_entity_add_collision_test
  "custom_entity:add_collision_test()"
  to be automatically notified when a collision is detected.

\subsection lua_api_entity_get_distance entity:get_distance(x, y), entity:get_distance(other_entity)

Returns the distance in pixels between this map entity and a point or another
map entity.

To compute the distance to a specified point:
- \c x (number): X coordinate of the point.
- \c y (number): Y coordinate of the point.
- Return value (number): The distance in pixels between the origin point of
  this entity and the point.

To compute the distance to another map entity:
- \c other_entity (entity): The entity to compute the distance to.
- Return value (number): The distance in pixels between the origin point of
  this entity and the origin point of the other entity.

\subsection lua_api_entity_get_angle entity:get_angle(x, y), entity:get_angle(other_entity)

Returns the angle between the X axis and the vector that joins this entity
to a point.

To compute the angle to a specified point:
- \c x (number): X coordinate of the point.
- \c y (number): Y coordinate of the point.
- Return value (number): The angle in radians between the origin point of
  this entity and the specified point.
  The angle is between \c 0 and <tt>2 * math.pi</tt>.

To compute the angle to another map entity:
- \c other_entity (entity): The entity to compute the angle to.
- Return value (number): The angle in radians between the origin point of
  this entity and the origin point of the other entity.
  The angle is between \c 0 and <tt>2 * math.pi</tt>.

\subsection lua_api_entity_get_direction4_to entity:get_direction4_to(x, y), entity:get_direction4_to(other_entity)

Like
\ref lua_api_entity_get_angle "entity:get_angle()",
but instead of an angle in radians,
returns the closest direction among the 4 main directions.

This is a utility function that essentially rounds the result of
\ref lua_api_entity_get_angle "entity:get_angle()".

To compute the direction to a specified point:
- \c x (number): X coordinate of the point.
- \c y (number): Y coordinate of the point.
- Return value (number): The direction this entity should take to look at
  this point, between 0 (East) and 3 (South).

To compute the direction to another map entity:
- \c other_entity (entity): An entity to target.
- Return value (number): The direction this entity should take to look at
  the other entity, between 0 (East) and 3 (South).

\subsection lua_api_entity_get_direction8_to entity:get_direction8_to(x, y), entity:get_direction8_to(other_entity)

Like
\ref lua_api_entity_get_angle "entity:get_angle()",
but instead of an angle in radians,
returns the closest direction among the 8 main directions.

This is a utility function that essentially rounds the result of
\ref lua_api_entity_get_angle "entity:get_angle()".

To compute the direction to a specified point:
- \c x (number): X coordinate of the point.
- \c y (number): Y coordinate of the point.
- Return value (number): The direction this entity should take to look at
  this point, between 0 (East) and 7 (South-East).

To compute the direction to another map entity:
- \c other_entity (entity): An entity to target.
- Return value (number): The direction this entity should take to look at
  the other entity, between 0 (East) and 7 (South-East).

\subsection lua_api_entity_snap_to_grid entity:snap_to_grid()

Makes sure this entity's upper left corner is aligned with the 8*8 grid
of the \ref lua_api_map "map".

\remark Be careful: this function does not check collisions with obstacles.

\subsection lua_api_entity_bring_to_front entity:bring_to_front()

Places this entity in front of all other entities on the same layer.

Since entities that are on the same layer can overlap,
you can use this function to change their Z-index.

\remark Some entities like NPCs, enemies, the hero
  and some
  \ref lua_api_custom_entity_is_drawn_in_y_order "custom entities"
  have the property to be
  displayed in Y order.
  The Z-index of these entities is already managed by the engine to show
  entities more to the north behind the ones more to the south.
  Therefore, this function has no effect on their drawing order.

\subsection lua_api_entity_bring_to_back entity:bring_to_back()

Places this entity behind all other entities on the same layer.

Since entities that are on the same layer can overlap,
you can use this function to change their Z-index.

\remark Some entities like NPCs, enemies and the hero have the property to be
  displayed in Y order.
  The Z-index of these entities is already managed by the engine to show
  entities more to the north behind the ones more to the south.
  Therefore, this function has no effect on their drawing.

\subsection lua_api_entity_get_optimization_distance entity:get_optimization_distance()

Returns the optimization threshold hint of this map entity.

Above this distance from the camera, the engine may decide to skip updates or
drawings.
This is only a hint: the engine is responsible of the final decision.
A value of \c 0 means an infinite distance (the entity is never optimized away).
- Return value (number): The optimization distance hint in pixels.

\subsection lua_api_entity_set_optimization_distance entity:set_optimization_distance(optimization_distance)

Sets the optimization threshold hint of this map entity.

Above this distance from the camera, the engine may decide to skip updates or
drawings.
This is only a hint: the engine is responsible of the final decision.

A value of \c 0 means an infinite distance (the entity is never optimized away).
The default value is \c 0.
- \c optimization_distance (number): The optimization distance hint to set in pixels.

\subsection lua_api_entity_is_in_same_region entity:is_in_same_region(other_entity)

Returns whether this entity is in the same region as another one.

Regions of the map are defined by the position of
\ref lua_api_separator "separators" and map limits.
The region of an entity is the one of its center point.

Regions should be rectangular.
Non-convex regions, for example with an "L" shape, are not supported by this
function.

You can use this function to make sure that an
\ref lua_api_enemy "enemy" close to the
\ref lua_api_hero "hero" but in the other side of a separator won't attack him.
- \c other_entity (entity): Another entity.
- Return value (boolean): \c true if both entities are in the same region.

\subsection lua_api_entity_test_obstacles entity:test_obstacles([dx, dy, [layer]])

Returns whether there would be a collision with obstacles
if this map entity was translated.
- \c dx (number, optional): X component of the translation in pixels
  (\c 0 means the current X position).
  No value means \c 0.
- \c dy (number, optional): Y component of the translation in pixels
  (\c 0 means the current Y position).
  No value means \c 0.
- \c layer (number, optional): Layer to test.
  No value means the current layer.
- Return value (boolean): \c true if there would be a collision in this
position.

\subsection lua_api_entity_get_sprite entity:get_sprite([name])

Returns a \ref lua_api_sprite "sprite" representing this entity.

To manage entities with multiple sprites, you can set names
with sprite creation methods like
\ref lua_api_enemy_create_sprite "enemy:create_sprite()"
and
\ref lua_api_custom_entity_create_sprite "custom_entity:create_sprite()".
However, it is easier to just leave the names blank and simply store the
result of these sprite creation methods.
The name is more useful for built-in entities that have multiple
sprites automatically created by the engine.
Such entities are the
\ref lua_api_hero "hero",
\ref lua_api_pickable "pickable treasures",
\ref lua_api_carried_object "carried objects"
and
\ref lua_api_crystal "crystals".
See the documentation pages of these entities to know their exact sprites,
the name of these sprites and which one is their main sprite.
For
\ref lua_api_enemy "enemies"
and
\ref lua_api_custom_entity "custom entities",
the main sprite is the first one in Z order,
which is the sprite creation order unless you
call
\ref lua_api_entity_bring_sprite_to_front "entity:bring_sprite_to_front()"
or
\ref lua_api_entity_bring_sprite_to_back "entity:bring_sprite_to_back()".

- \c name (string, optional): Name of the sprite to get.
  Only useful for entities that have multiple sprites.
  No value means the main sprite.
- Return value (\ref lua_api_sprite "sprite"): The entity sprite with this name,
  or its main sprite if no name is specified.
  Returns \c nil if the entity has no such sprite.

\subsection lua_api_entity_get_sprites entity:get_sprites()

Returns an iterator to all
\ref lua_api_sprite "sprites" of this entity.

At each step, the iterator provides two values:
the name of a sprite
(which is an empty string if the sprite has no name)
and the sprite itself.
See \ref lua_api_entity_get_sprite "entity:get_sprite()"
for more details about named sprites.

Sprites are returned in their displaying order.
Note that this order can be changed with
\ref lua_api_entity_bring_sprite_to_front "entity:bring_sprite_to_front()"
and
\ref lua_api_entity_bring_sprite_to_back "entity:bring_sprite_to_back()".

The typical usage of this function is:
\verbatim
for sprite_name, sprite in entity:get_sprites() do
  -- some code related to the sprite
end
\endverbatim
- Return value (function): An iterator to all sprites of this entity.

\subsection lua_api_entity_bring_sprite_to_front entity:bring_sprite_to_front(sprite)

Reorders a
\ref lua_api_sprite "sprite" of this entity to be displayed after other sprites
(displayed to the front).

This function is only useful for entities that have multiple sprites.
- \c sprite (\ref lua_api_sprite "sprite"): The sprite to reorder.
  It must belong to this entity.

\subsection lua_api_entity_bring_sprite_to_back entity:bring_sprite_to_back(sprite)

Reorders a
\ref lua_api_sprite "sprite" of this entity to be displayed before other sprites
(displayed to the back).

This function is only useful for entities that have multiple sprites.
- \c sprite (\ref lua_api_sprite "sprite"): The sprite to reorder.
  It must belong to this entity.

\subsection lua_api_entity_is_visible entity:is_visible()

Returns whether this entity is visible.

When the entity is hidden, its sprites (if any) are not displayed, but
everything else continues normally, including collisions.
- Return value (boolean): \c true if the entity is visible.

\subsection lua_api_entity_set_visible entity:set_visible([visible])

Hides or shows the entity.

When the entity is hidden, its sprites (if any) are not displayed, but
everything else continues normally, including collisions.
- \c visible (boolean, optional): \c true to show the entity, \c false to hide
  it. No value means \c true.

\subsection lua_api_entity_get_movement entity:get_movement()

Returns the current movement of this map entity.
- Return value (\ref lua_api_movement "movement"): The current movement,
  or \c nil if the entity is not moving.

\subsection lua_api_entity_stop_movement entity:stop_movement()

Stops the current movement of this map entity if any.

\section lua_api_entity_events Events of all entity types

Events are callback methods automatically called by the engine if you define
them.

\subsection lua_api_entity_on_created entity:on_created()

Called when this entity has just been created on the map.

\subsection lua_api_entity_on_removed entity:on_removed()

Called when this entity is about to be removed from the map
(and therefore destroyed).

\subsection lua_api_entity_on_position_changed entity:on_position_changed(x, y, layer)

Called when the coordinates of this entity have just changed.
- \c x (number): The new X coordinate of the entity.
- \c y (number): The new Y coordinate of the entity.
- \c layer (number): The new layer of the entity.

\subsection lua_api_entity_on_obstacle_reached entity:on_obstacle_reached(movement)

Called when the \ref lua_api_movement "movement"
of this entity was stopped because of an obstacle.

When an obstacle is reached, this event is called instead of
\ref lua_api_entity_on_position_changed "entity:on_position_changed()".
- \c movement (\ref lua_api_movement "movement"): The movement of the entity.

\subsection lua_api_entity_on_movement_started entity:on_movement_started(movement)

Called when a
\ref lua_api_movement "movement"
is started on this entity.
- \c movement (\ref lua_api_movement "movement"): The movement that was just
  started on this entity.

\subsection lua_api_entity_on_movement_changed entity:on_movement_changed(movement)

Called when some characteristics of this entity's
\ref lua_api_movement "movement"
(like the speed or the angle) have just changed.
- \c movement (\ref lua_api_movement "movement"): The movement of the entity.

\subsection lua_api_entity_on_movement_finished entity:on_movement_finished()

Called when the
\ref lua_api_movement "movement"
of the entity is finished (if there is an end).

*/

