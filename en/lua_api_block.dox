/**
\page lua_api_block Block

\tableofcontents

Blocks are solid \ref lua_api_entity "map entities"
that may be pushed or pulled by the
\ref lua_api_hero "hero".

This type of \ref lua_api_entity "map entity" can be declared in the
\ref lua_api_map_overview_files "map data file".
It can also be created dynamically with
\ref lua_api_map_create_block "map:create_block()".

\section lua_api_block_overview Overview

Blocks that can move may be pushable, pullable
or both pushable and pullable.
A block can be moved a finite or infinite number of times.
It can be moved to any direction (the four main directions)
or to a specific direction only.

The size of a block is always 16x16 pixels (the size of the hero),
but as usual, its sprite may be larger.

Blocks are normally always moved by steps of 16 pixels.
Thus, they can stay aligned on the 8x8 grid of the
\ref lua_api_map "map".
However, they may get stopped in the middle of their movement if they collide
with entities like
\ref lua_api_enemy "enemies" or \ref lua_api_npc "non-playing characters".
In this case, they lose their alignment on the grid, and this might be a
problem because you often want the to move a block
precisely through narrow places
and place it at an exact position to solve a puzzle.
To deal with this potential issue,
the engine automatically realigns the block to the 8x8 grid the
next time it is moved.

\section lua_api_block_inherited_methods Methods inherited from map entity

Blocks are particular \ref lua_api_entity "map entities".
Therefore, they inherit all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_block_methods Methods of the type block

The following methods are specific to blocks.

\subsection lua_api_block_reset block:reset()

Restores the block at its initial position and resets
its counter of moves.

It means that the hero will be able to move again
a block that has been moved the max number of times.

\subsection lua_api_block_is_pushable block:is_pushable()

Returns whether this block can be pushed.

This property is independent of whether or not the block was already moved its
maximum number of times.
- Return value (boolean): \c true if this block can be pushed.

\subsection lua_api_block_set_pushable block:set_pushable([pushable])

Sets whether this block can be pushed.

This property is independent of whether or not the block was already moved its
maximum number of times.
- \c pushable (boolean): \c true to make this block pushable.
  No value means \c true.

\subsection lua_api_block_is_pullable block:is_pullable()

Returns whether this block can be pulled.

This property is independent of whether or not the block was already moved its
maximum number of times.
- Return value (boolean): \c true if this block can be pulled.

\subsection lua_api_block_set_pullable block:set_pullable([pullable])

Sets whether this block can be pulled.

This property is independent of whether or not the block was already moved its
maximum number of times.
- \c pullable (boolean): \c true to make this block pullable.
  No value means \c true.

\subsection lua_api_block_get_maximum_moves block:get_maximum_moves()

Returns a value indicating the maximum number of times the block can be moved.

This function returns the maximum moves value that was set at creation time
or by \ref lua_api_block_set_maximum_moves "block:set_maximum_moves()",
no matter if the block was moved then.
- Return value (integer): How many times the block can be moved:
  \c 0: none, \c positive: the number, \c nil: infinite.

\subsection lua_api_block_set_maximum_moves block:set_maximum_moves(maximum_moves)

Sets the maximum number of times the block can be moved.

This resets the remaining allowed moves.
- \c maximum_moves (integer): How many times the block can be moved:
  \c 0: none, \c positive: that amount, \c nil: infinite.

\section lua_api_block_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

Blocks are particular \ref lua_api_entity "map entities".
Therefore, they inherit all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_block_events Events of the type block

The following events are specific to blocks.

\subsection lua_api_block_on_moving block:on_moving()

Called when the \ref lua_api_hero "hero" starts moving the block of a step.

\subsection lua_api_block_on_moved block:on_moved()

Called when the \ref lua_api_hero "hero" has just moved this block
of a step.

*/

