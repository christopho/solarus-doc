/**
\page lua_api_hero Hero

\tableofcontents

The hero is the character controlled by the player.
There is always exactly one hero on the current map.
The hero is automatically created by the engine:
you cannot create or remove him.

\section lua_api_hero_overview Overview

The name of the hero
(as returned by \ref lua_api_entity_get_name
"entity:get_name()") is always \c "hero".
Therefore, from a script, you can access the hero with
<tt>map:get_entity("hero")</tt> or,
if you are in a map script, directly with the
\c hero variable
(see \ref lua_api_map_get_entity "map:get_entity()" for more details).
There are also quick accessors
\ref lua_api_map_get_hero "map:get_hero()"
and
\ref lua_api_game_get_hero "game:get_hero()"
to retrieve the hero more easily.

His size is always 16x16 pixels.

The hero entity persists accross map changes.
In other words, the effect of functions like
\ref lua_api_hero_set_walking_speed "hero:set_walking_speed()"
persists when the player goes to another map.
Similarly, events that you define on the hero
(like \ref lua_api_hero_on_taking_damage "hero:on_taking_damage()")
continue to get called on any map while the game is active.

We describe here the Lua API that you can use to change the hero's state.

\subsection lua_api_hero_overview_sprites Hero sprites

Multiple sprites for the hero are automatically created by the engine.
You can access them like for any other entity, specifying their name in
\ref lua_api_entity_get_sprite "entity:get_sprite([name])".

Here is the list of hero sprites created by the engine and their names:
- \c "tunic": Main sprite of the hero. It always exists.
  This is the default one in
  \ref lua_api_entity_get_sprite "entity:get_sprite([name])".
- \c "shield": Shield if any.
- \c "sword": Sword if any.
- \c "sword_stars": Small stars sparkling near the sword in some states.
- \c "shadow": Shadow displayed under the hero in some states.
- \c "trail": Trail of dust displayed under the hero when running.
- \c "ground": Ground displayed under the hero when walking on special terrain
  like shallow water or grass.

Keep in mind that depending on the hero's equipment, his state
and the ground below him,
all of these built-in sprites don't always exist,
and some of them may exist at some point but without being currently displayed.

\section lua_api_hero_inherited_methods Methods inherited from map entity

The hero is a particular \ref lua_api_entity "map entity".
Therefore, he inherits all methods from the type map entity.

See \ref lua_api_entity_methods to know these methods.

\section lua_api_hero_methods Methods of the type hero

The following methods are specific to the hero.

\subsection lua_api_hero_teleport hero:teleport(map_id, [destination_name, [transition_style]])

Teletransports the hero to a different place.
- \c map_id (string): Id of the \ref lua_api_map "map" to go to
  (may be the same map or another one).
  If the map does not exist, the teletransportation fails and this function
  generates a Lua error.
  If the map exists, then the teletransportation is always successful
  even if there is no viable destination (see below).
- \c destination_name (string, optional): Name of the \ref lua_api_destination
  "destination entity" where to go on that map,
  or the special keyword \c "_same" to keep the same coordinates.
  Can also be the special keyword \c "_side0", \c "_side1", \c "_side2" or
  \c "_side3" to arrive near the East, North, West or South frontier of the map
  respectively. But the hero should be near the corresponding side of the
  original map for this to look okay. This is usually used in combination with
  scrolling transitions.
  No value means the default destination entity of the map.
  If the destination does not exist, a debugging message is logged and the
  default destination is used as a fallback.
  Finally, if there is no destination at all, then no default destination can
  be used. In this case, another debugging message is logged and the hero
  is placed at coordinates \c (0,0).
- \c transition_style (string, optional): \c "immediate" (no transition effect)
  \c "fade" (fade-out and fade-in effect) or \c "scrolling".
  The default value is \c "fade".

\remark The transportation will occur at the next cycle of the engine's main
  loop. Therefore, your map is not unloaded immediately and your map script
  continues to work.

\subsection lua_api_hero_get_direction hero:get_direction()

Returns the direction of the hero's \ref lua_api_sprite "sprites".
- Return value (number): The direction of the hero's sprites, between \c 0
  (East) and 3 (South).

\remark The direction of the hero's sprites may be different from both the
  direction pressed by the \ref lua_api_game_get_commands_direction "player's
  commands" and from the actual direction of the hero's \ref lua_api_movement
  "movement".

\subsection lua_api_hero_set_direction hero:set_direction(direction4)

Sets the direction of the hero's \ref lua_api_sprite "sprites".
- \c direction4 (number): The direction of the hero's sprites, between \c 0
  (East) and 3 (South).

\remark The direction of the hero's sprites may be different from both the
  direction pressed by the \ref lua_api_game_get_commands_direction "player's
  commands" and from the actual direction of the hero's \ref lua_api_movement
  "movement".

\subsection lua_api_hero_get_walking_speed hero:get_walking_speed()

Returns the speed of the normal walking movement of hero.

This speed is automatically reduced when the hero walks on special ground like
grass, ladders or holes.
- Return value (number): The speed of normal walk in pixels par second.

\subsection lua_api_hero_set_walking_speed hero:set_walking_speed(walking_speed)

Sets the speed of the normal walking movement of hero.

The default walking speed is 88 pixels per second.
This speed is automatically reduced when the hero walks on special ground like
grass, ladders or holes.
- \c walking speed (number): The speed of normal walk in pixels par second.

\subsection lua_api_hero_save_solid_ground hero:save_solid_ground([x, y, layer]), hero:save_solid_ground(callback)

Sets a position to go back to if the hero falls into a hole or other bad
ground.

This replaces the usual behavior which is going back to the last
solid position before the fall.

The position can be specified either as coordinates and a layer,
or as a function that returns coordinates and a layer.
Using a function allows to decide the position at the last moment.

To memorize a position directly:
- \c x (number, optional): X coordinate to memorize (no value means the current position).
- \c y (number, optional): Y coordinate to memorize (no value means the current position).
- \c layer (number, optional): Layer to memorize (no value means the current position).

To set a function that indicates the position to go back to:
- \c callback (function): A function to be called whenever the hero falls into
  bad ground. The function should return 2 or 3 values: x, y and optionally
  the layer (no layer value means keeping the layer unchanged).
  A \c nil value unsets any position or function that was previously set.

\subsection lua_api_hero_reset_solid_ground hero:reset_solid_ground()

Forgets a position that was previously memorized by
\ref lua_api_hero_save_solid_ground "hero:save_solid_ground()" (if any).

The initial behavior is restored: the hero will now get
back to where he was just before falling, instead going to of a memorized
position.

This is equivalent to
<tt>hero:save_solid_ground(nil)</tt>.

\subsection lua_api_hero_get_solid_ground_position hero:get_solid_ground_position()

Returns the position where the hero gets back if he falls into a hole or
other bad ground now.

This is the position that was previously memorized by the last call to
\ref lua_api_hero_save_solid_ground "hero:save_solid_ground()",
if any.
If the position was passed to
\ref lua_api_hero_save_solid_ground "hero:save_solid_ground()"
as a function, then this function is called to get a position.

Otherwise, this is the position of the hero the last time he was on solid
ground.
- Return value 1 (number): X coordinate where to get back to solid ground,
  or \c nil if the hero never went on solid ground on this map yet.
- Return value 2 (number): Y coordinate where to get back to solid ground,
  or no value if the hero never went on solid ground on this map yet.
- Return value 3 (number): Layer where to get back to solid ground,
  or no value if the hero never went on solid ground on this map yet.

\subsection lua_api_hero_get_animation hero:get_animation()

Returns the current animation of the hero's sprites.

The hero may have several sprites
(see \ref lua_api_hero_set_animation "hero:set_animation()".
This function always returns the animation of the tunic sprite.
- Return value (string): The animation name of the tunic sprite.

\subsection lua_api_hero_set_animation hero:set_animation(animation, [callback])

Changes the animation of the hero's sprites.

The hero has several
\ref lua_api_sprite "sprites",
that are normally displayed or not depending on his
\ref lua_api_hero_get_state "state" and his
\ref lua_api_game_get_ability "abilities":
- the body (the tunic),
- the shield,
- the sword,
- the sword stars,
- the trail of dust (by default, only shown when running).

The animation of all these sprites is usually managed by the engine to
represent the current state of the hero.
You can use this function to customize the animation.
This allows you to implement custom actions that are not provided by the
built-in states.
Make sure that you don't call this function when the hero is not already doing
a particular action (like pushing something or attacking),
unless you know what you are doing.

All sprites of the hero that have an animation with the specified name take the
animation. The ones that don't have such an animation are not displayed.
- \c animation (string): Name of the animation to set to hero sprites.
- \c callback (function, optional): A function to call when the animation ends
  (on the tunic sprite).
  If the animation loops, or is replaced by another animation before it ends,
  then the function will never be called.

\subsection lua_api_hero_get_tunic_sprite_id hero:get_tunic_sprite_id()

Returns the name of the sprite representing the hero's body.
- Return value (string): The \ref lua_api_sprite "sprite" animation set id
  of the hero's tunic.

\subsection lua_api_hero_set_tunic_sprite_id hero:set_tunic_sprite_id(sprite_id)

Changes the sprite representing the hero's body.

By default, the sprite used for the body is
\c "hero/tunicX",
where X is the
\ref lua_api_game_get_ability "tunic level".

You can use this function if you want to use another sprite.
- \c sprite_id (string): The \ref lua_api_sprite "sprite" animation set id
  of the hero's tunic.

\subsection lua_api_hero_get_sword_sprite_id hero:get_sword_sprite_id()

Returns the name of the sprite representing the hero's sword.
- Return value (string): The \ref lua_api_sprite "sprite" animation set id
  of the hero's sword.

\subsection lua_api_hero_set_sword_sprite_id hero:set_sword_sprite_id(sprite_id)

Changes the sprite representing the hero's sword.

By default, the sprite used for the sword is
\c "hero/swordX",
where X is the
\ref lua_api_game_get_ability "sword level",
or no sprite if the sword level is \c 0.

You can use this function if you want to use another sprite.
- \c sprite_id (string): The \ref lua_api_sprite "sprite" animation set id
  of the hero's sword.
  An empty string means no sword sprite.

\subsection lua_api_hero_get_sword_sound_id hero:get_sword_sound_id()

Returns the name of the sound played when the hero uses the sword.
- Return value (string): The sound id of the hero's sword.

\subsection lua_api_hero_set_sword_sound_id hero:set_sword_sound_id(sound_id)

Changes the sound to play when the hero uses the sword.

By default, the sound used for the sword is
\c "swordX",
where X is the
\ref lua_api_game_get_ability "sword level",
or no sound if the sword level is \c 0.

You can use this function if you want another sound to be played.
- \c sound_id (string): The sound id of the hero's sword.
  An empty string means no sword sound.

\subsection lua_api_hero_get_shield_sprite_id hero:get_shield_sprite_id()

Returns the name of the sprite representing the hero's shield.
- Return value (string): The \ref lua_api_sprite "sprite" animation set id
  of the hero's shield.

\subsection lua_api_hero_set_shield_sprite_id hero:set_shield_sprite_id(sprite_id)

Changes the sprite representing the hero's shield.

By default, the sprite used for the shield is
\c "hero/shieldX",
where X is the
\ref lua_api_game_get_ability "shield level",
or no sprite if the shield level is \c 0.

You can use this function if you want to use another sprite.
- \c sprite_id (string): The \ref lua_api_sprite "sprite" animation set id
  of the hero's shield.
  An empty string means no shield sprite.

\subsection lua_api_hero_is_invincible hero:is_invincible()

Returns whether the hero is currently invincible.

The hero is temporarily invincible after being hurt or
after you called
\ref lua_api_hero_set_invincible "hero:set_invincible()".
In this situation,
\ref lua_api_enemy "enemies"
cannot attack the hero,
but you can still hurt him manually with
\ref lua_api_hero_start_hurt "hero:start_hurt()".
- Return value (boolean): \c true if the hero is currently invincible.

\subsection lua_api_hero_set_invincible hero:set_invincible([invincible, [duration]])

Sets or unsets the hero temporarily invincible.

When the hero is invincible,
\ref lua_api_enemy "enemies"
cannot attack him,
but you can still hurt him manually with
\ref lua_api_hero_start_hurt "hero:start_hurt()".
- \c invincible (boolean, optional): \c true to make the hero invincible,
  or \c false to stop the invincibility.
  No value means \c true.
- \c duration (number, optional): Duration of the invincibility in milliseconds.
  Only possible when you set \c invincible to \c true.
  No value means unlimited.

\subsection lua_api_hero_is_blinking hero:is_blinking()

Returns whether the hero's sprites are currently blinking.

The sprites are temporarily blinking after the hero was hurt or
after you called
\ref lua_api_hero_set_blinking "hero:set_blinking()".
- Return value (boolean): \c true if the hero's sprite are currently blinking.

\remark The visibility property of the hero is independent from this.
  Even when the sprites are blinking, the result of
  \ref lua_api_entity_is_visible "hero:is_visible()"
  is unchanged.

\subsection lua_api_hero_set_blinking hero:set_blinking([blinking, [duration]])

Makes the hero's sprites temporarily blink or stop blinking.

This only affects displaying: see
\ref lua_api_hero_set_invincible "hero:set_invincible()"
if you also want to make the hero invincible.
- \c blinking (boolean, optional): \c true to to make the sprites blink,
  or \c false to stop the blinking.
  No value means \c true.
- \c duration (number, optional): Duration in milliseconds before stopping
  the blinking.
  Only possible when you set \c blinking to \c true.
  No value means unlimited.

\subsection lua_api_hero_get_state hero:get_state()

Returns the name of the current built-in state of the hero.
- Return value (\c string): The current state. Can be one of:
  \c "back to solid ground",
  \c "boomerang",
  \c "bow",
  \c "carrying",
  \c "falling",
  \c "forced walking",
  \c "free",
  \c "frozen",
  \c "grabbing",
  \c "hookshot",
  \c "hurt",
  \c "jumping",
  \c "lifting",
  \c "plunging",
  \c "pulling",
  \c "pushing",
  \c "running",
  \c "stairs",
  \c "swimming",
  \c "sword loading",
  \c "sword spin attack",
  \c "sword swinging",
  \c "sword tapping",
  \c "treasure",
  \c "using item"
  or \c "victory".

\subsection lua_api_hero_freeze hero:freeze()

Prevents the player from moving the hero until you call \ref
lua_api_hero_unfreeze "hero:unfreeze()".

\subsection lua_api_hero_unfreeze hero:unfreeze()

Restores the control to the player.
The control may have been lost for example by a call to
\ref lua_api_hero_freeze "hero:freeze()"
or to
\ref lua_api_movement_start "some_movement:start(hero)".

\subsection lua_api_hero_walk hero:walk(path, [loop, [ignore_obstacles]])

Makes the hero move with the specified path and a walking animation.
The player cannot control him during the movement.
- \c path (string): The path as a string sequence of integers. Each value
  is a number between 0 and 7 that represents a step (move of 8 pixels)
  in the path. 0 is East, 1 is North-East, etc.
- \c loop (boolean, optional): \c true to repeat the path once it is done (default \c
  false).
- \c ignore_obstacles (boolean, optional): \c true to allow the hero to traverse
  obstacles during this movement (default \c false).
  Make sure the movement does not end inside an obstacle.

\subsection lua_api_hero_start_jumping hero:start_jumping(direction8, distance, [ignore_obstacles])

Makes the hero jump towards the specified direction.
- \c direction8 (number): Direction of the jump, between \c 0 and \c 7
  (see \ref lua_api_jump_movement_set_direction8
  "jump_movement:set_direction8()").
- \c distance (number): Distance of the jump in pixels
  (see \ref lua_api_jump_movement_set_distance "jump_movement:set_distance()").
- \c ignore_obstacles (boolean, optional): \c true to allow the hero to
  traverse obstacles during this movement (default \c false).
  Make sure the movement does not end inside an obstacle.

\subsection lua_api_hero_start_attack hero:start_attack()

Makes the hero perform his main attack (swinging his sword).

This function does the same as what happens when the player presses
the \c "attack" game \ref lua_api_game_overview_commands "command".
You can use it to trigger the attack from your script instead of from a
game command.

If the player is not allowed to perform the attack now
(because he does not have the sword
\ref lua_api_game_get_ability "ability"
or because the hero is currently busy in another state), then nothing happens.

\subsection lua_api_hero_start_item hero:start_item(item)

Makes the hero use an \ref lua_api_item "equipment item".

The \ref lua_api_item_on_using "item:on_using()" event will be called and
the player won't be able to control the hero until you call
\ref lua_api_item_set_finished "item:set_finished()". See the documentation
of \ref lua_api_item "equipment items" for more information.

This function does the same as what happens when the player presses
a game \ref lua_api_game_overview_commands "command" corresponding to this
equipment item.
You can use it to trigger the item from your script instead of from a
game command.

If the player is not allowed to use the item now
(because he does not have it, because the item cannot be used explicitly,
or because the hero is currently busy in another state), then nothing happens.
- \c item (\ref lua_api_item "item"): The equipment item to start using.

\subsection lua_api_hero_start_treasure hero:start_treasure(treasure_name, [treasure_variant, [treasure_savegame_variable, [callback]]])

Gives a treasure to the player. The hero will brandish the treasure as follows.

The hero sprites take the animation \c "treasure".
The treasure is displayed above the hero, as the sprite
\c "entities/items" with animation \c treasure_name
and direction <tt>treasure_variant - 1</tt>.
If this sprite, this animation or this direction do not exist,
then no treasure sprite is displayed above the hero.

If a dialog called \c "_treasure.treasure_name.treasure_variant" exists,
then this dialog is displayed during the brandishing animation.
For example, calling <tt>hero:start_treasure("heart", 1)</tt>
will automatically show the dialog <tt>_treasure.heart.1</tt>.

- \c treasure_name (string, optional): Kind of treasure to give
  (the name of an \ref lua_api_item "equipment item").
  The treasure must be an
  \ref lua_api_item_is_obtainable "obtainable" item.
- \c treasure_variant (number, optional): Variant of the treasure
  (because some \ref lua_api_item "equipment items"
  may have several variants).
  The default value is \c 1 (the first variant).
- \c treasure_savegame_variable (string, optional): Name of the boolean
  value that stores in the \ref lua_api_game "savegame"
  whether this treasure is found.
  No value means that the state of the treasure is not saved.
  It is allowed (though strange) to give the same saved treasure twice.
- \c callback (function, optional): A function that will be called when the
  treasure's dialog finishes, or after a delay of 3 seconds if there is
  no dialog.

\remark If there is no callback, or if the callback does not change the state
  of the hero, then he automatically stops the brandishing animation.

\subsection lua_api_hero_start_victory hero:start_victory([callback])

Makes the hero brandish his sword for a victory.
- \c callback (function, optional): A function to call when the victory
  sequence finishes. If you don't define it, the default behavior is to
  restore control to the player.
  If you define it, you can do other things, like teletransporting the hero
  somewhere else. To restore the control to the player, call
  \ref lua_api_hero_unfreeze "hero:unfreeze()".

\subsection lua_api_hero_start_boomerang hero:start_boomerang(max_distance, speed, tunic_preparing_animation, sprite_name)

Makes the hero shoot a \ref lua_api_boomerang "boomerang".
- \c max_distance (number): Maximum distance of the boomerang's movement in
  pixels.
- \c speed (number): Speed of the boomerang's movement in pixels per second.
- \c tunic_preparing_animation (string): Name of the animation that the
  hero's tunic sprite should take while preparing the boomerang.
- \c sprite_name (string): Sprite animation set to use to draw the boomerang
  then.

\subsection lua_api_hero_start_bow hero:start_bow()

Makes the hero shoot an
\ref lua_api_arrow "arrow"
with a bow.

\subsection lua_api_hero_start_hookshot hero:start_hookshot()

Makes the hero throw a
\ref lua_api_hookshot "hookshot".

\subsection lua_api_hero_start_running hero:start_running()

Makes the hero run.

\subsection lua_api_hero_start_hurt hero:start_hurt(source_x, source_y, damage)

Hurts the hero, exactly like when he is touched by an
\ref lua_api_enemy "enemy".
The hurting animations and sounds of the hero are played.

This method hurts the hero even if enemies cannot,
including when the hero is temporarily
\ref lua_api_hero_is_invincible "invincible"
(because he was already hurt recently)
or when the hero is in a state where
he cannot be hurt (for example when he is brandishing a treasure).
- \c source_x (number): X coordinate of whatever hurts the hero.
  Used to push the hero away from that source.
- \c source_y (number): Y coordinate of whatever hurts the hero.
  Used to push the hero away from that source.
- \c damage (number): Base number of life points to remove (possibly \c 0).
  This number will be divided by the
  \ref lua_api_game_get_ability "tunic" level of the player,
  unless you override this default calculation in
  \ref lua_api_hero_on_taking_damage "hero:on_taking_damage()".

\remark If you just want to remove some life to the player, without making the
  hurting animations and sounds of the hero, see \ref lua_api_game_remove_life
  "game:remove_life()".

\subsection lua_api_hero_start_hurt_entity hero:start_hurt([source_entity, [source_sprite]], damage)

Same as
\ref lua_api_hero_start_hurt "hero:start_hurt(source_x, source_y, damage)",
but specifying the source coordinates as an optional entity
and possibly its sprite.
- \c source_entity (\ref lua_api_entity "map entity", optional):
  Whatever hurts the hero.
  The coordinates of this source entity are used to push the hero away from
  that source.
  No value means that the hero will not be pushed away.
- \c source_sprite (\ref lua_api_sprite "sprite", optional): Which sprite of
  the source entity is hurting the hero.
  If you set this value, the hero will be pushed away from the origin of this
  sprite instead of from the origin of the source entity.
  Most of the time, you don't need to set this parameter.
- \c damage: Base number of life points to remove (possibly \c 0).
  This number will be divided by the
  \ref lua_api_game_get_ability "tunic" level of the player,
  unless you override this default calculation in
  \ref lua_api_hero_on_taking_damage "hero:on_taking_damage()".

\section lua_api_hero_inherited_events Events inherited from map entity

Events are callback methods automatically called by the engine if you define
them.

The hero is a particular \ref lua_api_entity "map entity".
Therefore, he inherits all events from the type map entity.

See \ref lua_api_entity_events to know these events.

\section lua_api_hero_events Events of the type hero

The following events are specific to the hero.

Recall that the hero persists when the player goes to another map, and
so do the events defined on the hero.

\subsection lua_api_hero_on_state_changed hero:on_state_changed(state)

Called when the built-in state of the hero changes.
- \c state (string): Name of the new state. See
  \ref lua_api_hero_get_state "hero:get_state()" for the list of possible
  states.

\remark This event is called even for the initial state of the hero,
  right after \ref lua_api_game_on_started "game:on_started()".
  This initial state is always \c "free".

\subsection lua_api_hero_on_taking_damage hero:on_taking_damage(damage)

Called when the hero is hurt and should take damages.

This happens usually after a collision with an
\ref lua_api_enemy "enemy" or when you call
\ref lua_api_hero_start_hurt "hero:start_hurt()".

This event allows you to override what happens when the hero takes damage.
By default, if you don't define this event, the hero loses some life as
follows.
The life lost is the damage inflicted by the attacker divided by the
\ref lua_api_game_get_ability "tunic level" of the player, with a minimum of
\c 1 (unless the initial damage was already \c 0).

You can define this event if you need to change how the hero takes damage,
for example if you want the
\ref lua_api_game_get_ability "shield level"
to give better resistance to injuries.
- \c damage (number): Damage inflicted by the attacker, no matter if this was
  an enemy or a call to
  \ref lua_api_hero_start_hurt "hero:start_hurt()".

*/

